{"version":3,"file":"server.js","mappings":"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","sources":["webpack://3d-tank-game/webpack/bootstrap","webpack://3d-tank-game/webpack/runtime/compat get default export","webpack://3d-tank-game/webpack/runtime/define property getters","webpack://3d-tank-game/webpack/runtime/hasOwnProperty shorthand","webpack://3d-tank-game/external commonjs \"three\"","webpack://3d-tank-game/external commonjs \"cannon\"","webpack://3d-tank-game/./src/game/objects/crate.js","webpack://3d-tank-game/./src/game/effects/square_debris.js","webpack://3d-tank-game/./src/game/effects/falling_crate_derbis_effect.js","webpack://3d-tank-game/./src/game/objects/destructible_crate.js","webpack://3d-tank-game/./src/game/factories/destructable_crate_factory.js","webpack://3d-tank-game/./src/game/battlemap.js","webpack://3d-tank-game/./src/game/effects/explosion.js","webpack://3d-tank-game/./src/game/effects/particle_system.js","webpack://3d-tank-game/./src/game/utils/contact.js","webpack://3d-tank-game/./src/game/objects/projectile.js","webpack://3d-tank-game/./src/game/utils/slerp.js","webpack://3d-tank-game/./src/game/objects/tank.js","webpack://3d-tank-game/./src/game/skybox.js","webpack://3d-tank-game/./src/game/utils/binary_heap.js","webpack://3d-tank-game/./src/game/ai_player.js","webpack://3d-tank-game/./src/game/objects/power_up.js","webpack://3d-tank-game/./src/game/objects/heal_power_up.js","webpack://3d-tank-game/./src/game/utils/loop.js","webpack://3d-tank-game/./src/game/headless_game.js","webpack://3d-tank-game/./src/game/fake_resource.js","webpack://3d-tank-game/./src/controllers/provider_controller.js","webpack://3d-tank-game/./src/providers/ws/events/event.js","webpack://3d-tank-game/external commonjs \"uWebSockets.js\"","webpack://3d-tank-game/./src/providers/ws/ws_provider.js","webpack://3d-tank-game/./src/server.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"three\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"cannon\");","import * as CANNON from 'cannon';\n\nexport default class Crate {\n    static objectId = 1;\n    constructor(position, size = 2) {\n\n        this.position = position;\n        this.size = size;\n        this.createPhysicsBody();\n    }\n\n\n    createPhysicsBody() {\n        const shape = new CANNON.Box(new CANNON.Vec3(this.size/2, this.size/2, this.size/2));\n        this.body = new CANNON.Body({ mass: 0 }); // масса 0 для статичного об'єкта\n        this.body.addShape(shape);\n        this.body.position.copy(this.position);\n    }\n\n    update() { }\n}\n","// square_debris.js\nimport * as THREE from 'three';\n\nexport class SquareDebris {\n    constructor(scene, position, color, rotation = 0, size = new THREE.Vector3(0.2,0.2,0.2)) {\n        this.scene = scene;\n        this.position = position;\n        this.color = color;\n        this.size = size;\n        this.rotation = rotation;\n        this.velocity = new THREE.Vector3();\n        this.angularVelocity = new THREE.Vector3(\n            Math.random() * 5 - 2.5,\n            Math.random() * 5 - 2.5,\n            Math.random() * 5 - 2.5\n        );\n        this.removed = false;\n\n        this.createMesh();\n    }\n\n    createMesh() {\n        const geometry = new THREE.BoxGeometry(this.size.x, this.size.y, this.size.z);\n        const material = new THREE.MeshPhongMaterial({ color: this.color });\n        this.mesh = new THREE.Mesh(geometry, material);\n        this.mesh.rotateY(this.rotation);\n        this.mesh.position.copy(this.position);\n        this.scene.add(this.mesh);\n    }\n\n    update(deltaTime) {\n        if (this.removed) return;\n        if (this.mesh.position.y < -this.size.y) {\n            return this.remove();\n        }\n        // Оновлюємо позицію\n        this.mesh.position.addScaledVector(this.velocity, deltaTime);\n\n        // Оновлюємо обертання\n        this.mesh.rotation.x += this.angularVelocity.x * deltaTime;\n        this.mesh.rotation.y += this.angularVelocity.y * deltaTime;\n        this.mesh.rotation.z += this.angularVelocity.z * deltaTime;\n\n        // Додаємо гравітацію\n        this.velocity.y -= 9.8 * deltaTime;\n\n        // Зменшуємо швидкість з часом (опір повітря)\n        this.velocity.multiplyScalar(0.99);\n    }\n\n    remove() {\n        if (!this.removed) this.scene.remove(this.mesh);\n        this.removed = true;\n    }\n}","// destroyed_crate_effect.js\nimport * as THREE from 'three';\nimport { SquareDebris } from './square_debris';\n\n\nexport class FallingCrateDerbisEffect {\n    constructor(scene, crate, world, rectangles) {\n        this.scene = scene;\n        this.crate = crate;\n        this.world = world;\n        this.debris = [];\n        this.duration = 3;\n        this.elapsedTime = 0;\n        this.rectangles = rectangles;\n\n        this.createDebris();\n    }\n\n    createDebris() {\n        for (let i = 0; i < this.rectangles.length; i++) {\n            const rectangle = this.rectangles[i];\n            const position = new THREE.Vector3(\n                rectangle.position.x + this.crate.position.x,\n                rectangle.position.y + this.crate.position.y,\n                rectangle.position.z + this.crate.position.z\n            );\n            const debris = new SquareDebris(this.scene, position, this.crate.color, \n                rectangle.isVertical ? 0 : Math.PI / 2,\n                new THREE.Vector3(this.crate.cubeSize * 2, this.crate.cubeSize, this.crate.cubeSize));\n            this.debris.push(debris);\n            const fromPosition = position.clone();\n            // direction down\n            fromPosition.y = 0;\n            const direction = new THREE.Vector3().subVectors(position, fromPosition).normalize();\n            const speed = 2;\n            debris.velocity.copy(direction).multiplyScalar(speed);\n        }\n    }\n\n\n    update(deltaTime) {\n        this.elapsedTime += deltaTime;\n\n        if (this.elapsedTime >= this.duration) {\n            this.remove();\n            return false;\n        }\n        // Оновлюємо уламки\n        this.debris.forEach(debris => debris.update(deltaTime));\n        return true;\n    }\n\n    remove() {\n        this.debris.forEach(debris => debris.remove());\n    }\n}\n","import * as THREE from 'three';\nimport * as CANNON from 'cannon';\nimport { FallingCrateDerbisEffect } from '../effects/falling_crate_derbis_effect';\n\nexport default class DestructibleCrate {\n    static objectId = 2;\n    constructor(scene, game, position, mesh, offset, geometryScale, color, size = 2, resolution = 6, height = 6) {\n        this.id = game.generateCrateId();\n        this.scene = scene;\n        this.game = game;\n        this.mesh = mesh;\n        this.color = color;\n        this.colorHex = new THREE.Color();\n        this.colorHex.setHex(color);\n        this.offset = offset;\n        this.geometryScale = geometryScale;\n        this.world = game.world;\n        this.position = position;\n        this.size = size;\n        this.resolution = resolution;\n        this.height = height;\n        this.cubeSize = size / resolution;\n        this.cubes = [];\n        this.shapes = [];\n        this.scale = 1;\n        this.rectSizes = null;\n        this.boxQuaternion = new THREE.Quaternion();\n        this.scaleVec = new THREE.Vector3(1, 1, 1);\n        this.boxIndexes = [];\n        this.rectIndexes = [];\n        this.isDirty = false;\n        this.activeCount = 0;\n\n        this.buildMesh();\n        this.createPhysicsBody();\n    }\n\n    buildMesh() {\n        this.geometry = new THREE.BoxGeometry(this.cubeSize*2, this.cubeSize, this.cubeSize);\n        this.verticalGeometry = new THREE.BoxGeometry(this.cubeSize, this.cubeSize, this.cubeSize*2);\n        this.rectSizes = new THREE.Vector3(this.cubeSize*2, this.cubeSize, this.cubeSize);\n\n        let index = this.offset;\n        const matrix = new THREE.Matrix4();\n\n        const buildPyramidBot = (posY, offset) => {\n            for (let z = 0; z < this.resolution - (offset ? 1 : 0); z++) {\n                for (let x = 0; x < ((this.resolution/2) - z) - (offset ? 1 : 0); x++) {\n                    const posX = offset + z * this.cubeSize + x * (this.cubeSize*2) - this.size / 2 + (this.cubeSize*2) / 2;\n                    const posZ = z * this.cubeSize - this.size / 2 + this.cubeSize / 2;\n\n                    const mx = matrix.makeRotationY(0);\n                    mx.setPosition(\n                        this.position.x + posX,\n                        this.position.y + posY,\n                        this.position.z + posZ\n                    );\n                    mx.scale(this.geometryScale); \n                    this.mesh.setMatrixAt(index, mx);\n                    //this.mesh.setColorAt(index, this.colorHex);\n                    const shape = new CANNON.Box(new CANNON.Vec3(this.cubeSize, this.cubeSize/2, this.cubeSize/2));\n                    this.shapes.push({shape, offset: new THREE.Vector3(posX, posY, posZ), active: false});\n                    this.cubes.push({ index: index, isVertical: false, position: new THREE.Vector3(posX, posY, posZ), active: true });\n                    index++;\n                    this.activeCount++;\n                }\n            }\n        }\n\n        const buildPyramidRight = (posY, offset) => {\n            for (let x = 0; x < (this.resolution/2) - (offset ? 1 : 0); x++) {\n                for (let z = 0; z < ((this.resolution/2)-x) - (offset ? 1 : 0); z++) {\n                    const posZ = offset + x * this.cubeSize + z * (this.cubeSize*2) - this.size / 2 + (this.cubeSize*2) / 2;\n                    const posX = x * this.cubeSize - this.size / 2 + this.cubeSize / 2;\n                    \n                    const mx = matrix.makeRotationY(Math.PI / 2);\n                    mx.setPosition(\n                        this.position.x + posX,\n                        this.position.y + posY,\n                        this.position.z + posZ\n                    );\n                    mx.scale(this.geometryScale); \n                    this.mesh.setMatrixAt(index, mx);\n                    //this.mesh.setColorAt(index, this.colorHex);\n                    const shape = new CANNON.Box(new CANNON.Vec3(this.cubeSize/2, this.cubeSize/2, this.cubeSize));\n                    this.shapes.push({shape, offset: new THREE.Vector3(posX, posY, posZ), active: false});\n                    this.cubes.push({ index: index, isVertical: true, position: new THREE.Vector3(posX, posY, posZ), active: true });\n                    index++;\n                    this.activeCount++;\n                }\n            }\n        }\n\n        const buildPyramidLeft = (posY, offset) => {\n            let level = 0;\n            for (let x = this.resolution-1-(offset ? 1 : 0); x >= (this.resolution/2); x--) {\n                for (let z = ((this.resolution/2)-level)-1-(offset ? 1 : 0); z >= 0; z--) {\n                    const posZ = level * this.cubeSize + z * (this.cubeSize*2) - this.size / 2 + (this.cubeSize*2) / 2 + offset;\n                    const posX = x * this.cubeSize - this.size / 2 + this.cubeSize / 2 + offset;\n                    const mx = matrix.makeRotationY(Math.PI / 2);\n                    mx.setPosition(\n                        this.position.x + posX,\n                        this.position.y + posY,\n                        this.position.z + posZ\n                    );   \n                    mx.scale(this.geometryScale); \n                    this.mesh.setMatrixAt(index, mx);\n                    //this.mesh.setColorAt(index, this.colorHex);\n                    const shape = new CANNON.Box(new CANNON.Vec3(this.cubeSize/2, this.cubeSize/2, this.cubeSize));\n                    this.shapes.push({shape, offset: new THREE.Vector3(posX, posY, posZ), active: false});\n                    this.cubes.push({ index: index, isVertical: true, position: new THREE.Vector3(posX, posY, posZ), active: true });\n                    index++;\n                    this.activeCount++;\n                }\n                level++;\n            }\n        }\n\n        const buildPyramidTop = (posY, offset) => {\n            let level = 0;\n            for (let z = this.resolution-1-(offset ? 1 : 0); z >= 0; z--) {\n                for (let x = 0; x < ((this.resolution/2)-level)-(offset ? 1 : 0); x++) {\n                    const posX = level * this.cubeSize + x * (this.cubeSize*2) - this.size / 2 + (this.cubeSize*2) / 2 + offset;\n                    const posZ = z * this.cubeSize - this.size / 2 + this.cubeSize / 2 + offset;\n\n                    const mx = matrix.makeRotationY(0);\n                    mx.setPosition(\n                        this.position.x + posX,\n                        this.position.y + posY,\n                        this.position.z + posZ\n                    );   \n                    mx.scale(this.geometryScale); \n                    this.mesh.setMatrixAt(index, mx);\n                    //this.mesh.setColorAt(index, this.colorHex);\n                    const shape = new CANNON.Box(new CANNON.Vec3(this.cubeSize, this.cubeSize/2, this.cubeSize/2));\n                    this.shapes.push({shape, offset: new THREE.Vector3(posX, posY, posZ), active: false});\n                    this.cubes.push({ index: index, isVertical: false, position: new THREE.Vector3(posX, posY, posZ), active: true });\n                    index++;\n                    this.activeCount++;\n                }\n                level++;\n            }\n        }\n\n        for (let y = 0; y < this.height; y++) {\n            const isOdd = y % 2 == 0;\n            const posY = y * this.cubeSize - this.size / 2 + this.cubeSize / 2;\n            buildPyramidBot(posY, isOdd ? this.cubeSize : 0);\n            buildPyramidTop(posY, isOdd ? this.cubeSize : 0);\n            buildPyramidRight(posY, !isOdd ? this.cubeSize : 0);\n            buildPyramidLeft(posY, !isOdd ? this.cubeSize : 0);\n        }\n        this.indexBlocks();\n    }\n\n    indexBlocks() {\n        this.boxIndexes = new Array(this.height*this.resolution**2).fill(null);\n        for (let y = 0; y < this.height; y++) {\n            for (let z = 0; z < this.resolution; z++) {\n                for (let x = 0; x < this.resolution; x++) {\n                    const posX = x * this.cubeSize - this.size / 2 + this.cubeSize / 2;\n                    const posY = y * this.cubeSize - this.size / 2 + this.cubeSize / 2;\n                    const posZ = z * this.cubeSize - this.size / 2 + this.cubeSize / 2;\n\n                    const point = new THREE.Vector3(\n                        posX,\n                        posY,\n                        posZ\n                    );\n                    \n                    for (let i = y*this.resolution**2/2; i < (y+1)*this.resolution**2/2; i++) {\n                        const {position, isVertical} = this.cubes[i];\n                        const geometry = isVertical ? this.verticalGeometry : this.geometry;\n                        if (this.isPointInsideBox(point, geometry, position)) {\n                            const index = y * this.resolution * this.resolution + z * this.resolution + x;\n                            this.boxIndexes[index] = i;\n                        }\n                    }\n                    \n                }\n            }\n        }\n    }\n\n    addBodyShapes(shapes) {\n        shapes.forEach(({shape, offset, orientation}) => {\n            const shapeOffset = new CANNON.Vec3();\n            const shapeOrientation = new CANNON.Quaternion();\n         \n            if(offset){\n                shapeOffset.copy(offset);\n            }\n            if(orientation){\n                shapeOrientation.copy(orientation);\n            }\n         \n            this.body.shapes.push(shape);\n            this.body.shapeOffsets.push(shapeOffset);\n            this.body.shapeOrientations.push(shapeOrientation);\n        })\n        this.body.updateMassProperties();\n        this.body.updateBoundingRadius();\n        this.body.aabbNeedsUpdate = true;\n    }\n\n    removeBodyShapes(shapes) {\n        shapes.forEach(({shape}) => {\n            const i = this.body.shapes.indexOf(shape);\n            this.body.shapes.splice(i, 1);\n            this.body.shapeOffsets.splice(i, 1);\n            this.body.shapeOrientations.splice(i, 1);\n        })\n        this.body.updateMassProperties();\n        this.body.updateBoundingRadius();\n        this.body.aabbNeedsUpdate = true;\n    }\n\n    updatePhysicalBody() {\n        if (!this.isDirty) {\n            this.removeBodyShapes([this.initialShape]);\n            const shapesToAdd = this.shapes.filter((s, i) => this.cubes[i].active);\n            this.addBodyShapes(shapesToAdd);\n            shapesToAdd.forEach((s) => s.active = true);\n            this.isDirty = true;\n            return\n        }\n        const shapesToRemove = this.shapes.filter((s, i) => (!this.cubes[i].active && s.active));\n        shapesToRemove.forEach(s => s.active = false);\n        this.removeBodyShapes(shapesToRemove);\n    }\n\n    createPhysicsBody() {\n        this.body = new CANNON.Body({ mass: 0 });\n        this.body.position.copy(this.position);\n        this.body.isCrate = true;\n        this.body.model = this;\n        this.initialShape = {shape: new CANNON.Box(new CANNON.Vec3(this.size/2, this.cubeSize*this.height/2, this.size/2))};\n        this.addBodyShapes([this.initialShape]);\n        this.world.addBody(this.body);\n    }\n\n    applyState({isDirty, inactiveCubes}) {\n        const matrix = new THREE.Matrix4();\n        this.isDirty = isDirty;\n        if (!isDirty) return;\n        inactiveCubes.forEach((index) => {\n            const cube = this.cubes.find((cube) => cube.index === index);\n            if (cube.active) {\n                this.mesh.setMatrixAt(cube.index, matrix.set(0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0));\n                this.mesh.instanceMatrix.addUpdateRange(cube.index*16, 16);\n                cube.active = false;\n                this.activeCount--;\n            }\n        })\n        this.mesh.instanceMatrix.needsUpdate = true;\n        this.updatePhysicalBody();\n        if (!this.activeCount) {\n            this.remove();\n        }\n    }\n\n    destroyCubesInRadius(hitPoint, radius) {\n        const matrix = new THREE.Matrix4();\n        let lastCurePosition = null;\n        let count = 0;\n        this.cubes.forEach(cube => {\n            if (cube.active) {\n                const distance = cube.position.distanceTo(hitPoint);\n                if (distance <= radius) {\n                    this.mesh.setMatrixAt(cube.index, matrix.set(0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0));\n                    this.mesh.instanceMatrix.addUpdateRange(cube.index*16, 16);\n                    lastCurePosition = cube.position;\n                    cube.active = false;\n                    this.activeCount--;\n                    count++;\n                }\n            }\n        });\n        \n        const floatingCubesIndexSet = this.findFloatingCubes();\n        if (floatingCubesIndexSet.size) {\n            this.clearFloatingCubes(floatingCubesIndexSet);\n        }\n        this.mesh.instanceMatrix.needsUpdate = true;\n        this.updatePhysicalBody();\n        if (!this.activeCount) {\n            this.remove();\n        }\n        return new THREE.Vector4(\n            lastCurePosition ? this.position.x + lastCurePosition.x :  this.position.x,\n            lastCurePosition ? this.position.y + lastCurePosition.y : this.position.y,\n            lastCurePosition ? this.position.z + lastCurePosition.z : this.position.z ,\n            count\n        )\n    }\n\n    clearFloatingCubes(floatingCubesIndexSet) {\n        const matrix = new THREE.Matrix4();\n        const rectangles = this.cubes.filter((c, i) => c.active && floatingCubesIndexSet.has(i)).map(cube => {\n            this.mesh.setMatrixAt(cube.index, matrix.set(0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0));\n            this.mesh.instanceMatrix.addUpdateRange(cube.index*16, 16);\n            cube.active = false;\n            this.activeCount--;\n            return cube;\n        });\n        if (!this.activeCount) {\n            this.remove();\n        }\n        if (!this.game.headless) this.createFallingCrateDerbisEffect(rectangles)\n    }\n\n    findFloatingCubes() {\n        const visited = new Set();\n        const floating = new Set(this.boxIndexes.map((i, index) => [i, index])\n            .filter(([i]) => this.cubes[i].active).map(([_, index]) => index));\n        // Функція для рекурсивного \"затоплення\"\n        const flood = (x, y, z) => {\n            const index = this.getIndex(x, y, z);\n            if (index === -1 || !floating.has(index)) return;\n\n            floating.delete(index);\n            visited.add(index);\n\n            // Перевіряємо сусідні кубики\n            [\n                [x+1, y, z], [x-1, y, z],\n                [x, y+1, z], [x, y-1, z],\n                [x, y, z+1], [x, y, z-1]\n            ].forEach(([nx, ny, nz]) => {\n                if (!visited.has(this.getIndex(nx, ny, nz))) {\n                    flood(nx, ny, nz);\n                }\n            });\n        };\n\n        // Починаємо \"затоплення\" з нижнього рівня\n        for (let z = 0; z < this.resolution; z++) {\n            for (let x = 0; x < this.resolution; x++) {\n                flood(x, 0, z);\n            }\n        }\n\n        return new Set(Array.from(floating).map(i => this.boxIndexes[i]));\n    }\n\n    getIndex(x, y, z) {\n        if (x < 0 || x >= this.resolution || y < 0 || y >= this.height || z < 0 || z >= this.resolution) {\n            return -1;\n        }\n        return y * this.resolution * this.resolution + z * this.resolution + x;\n    }\n\n    isPointInsideBox(point, boxGeometry, boxPosition) {\n        // Отримуємо розміри BoxGeometry\n        const size = new THREE.Vector3();\n        boxGeometry.computeBoundingBox();\n        boxGeometry.boundingBox.getSize(size);\n        \n        // Створюємо матрицю трансформації для BoxGeometry\n        const matrix = new THREE.Matrix4();\n        matrix.compose(boxPosition, this.boxQuaternion, this.scaleVec);\n        \n        // Обчислюємо обернену матрицю\n        const inverseMatrix = new THREE.Matrix4();\n        inverseMatrix.copy(matrix).invert();\n        \n        // Перетворюємо точку в локальні координати BoxGeometry\n        const localPoint = point.clone().applyMatrix4(inverseMatrix);\n        \n        // Перевіряємо, чи знаходиться точка всередині BoxGeometry\n        return (\n            Math.abs(localPoint.x) <= size.x / 2 &&\n            Math.abs(localPoint.y) <= size.y / 2 &&\n            Math.abs(localPoint.z) <= size.z / 2\n        );\n    }\n\n    createFallingCrateDerbisEffect(rectangles) {\n        const fallingDerbisEffect = new FallingCrateDerbisEffect(this.scene, this, this.world, rectangles);\n        this.game.addDestroyedEffect(fallingDerbisEffect);\n    }\n\n    remove() {\n        this.game.battleMap.removeCrate(this);\n        this.world.removeBody(this.body);\n    }\n\n    update() {\n\n    }\n}","import * as THREE from 'three';\nimport DestructibleCrate from '../objects/destructible_crate';\n\nexport class DestructibleCrateFactory {\n    constructor(scene, game, size = 2, resolution = 6, basicCount = 50) {\n        this.scene = scene;\n        this.game = game;\n        this.size = size;\n        this.resolution = resolution;\n        this.basicCount = basicCount;\n        this.cubeSize = size / resolution;\n        this.offset = 0;\n        const lego = this.game.loader.getModel(\"red_crate\");\n        const legoTexture = this.game.loader.getTexture(\"red_crate\");\n        const legoTextureNormal = this.game.loader.getTexture(\"red_crate_normal\");\n        const material = new THREE.MeshStandardMaterial({\n            map: legoTexture,\n            normalMap: legoTextureNormal,\n            roughness: 1,\n            metalness: 0.1,\n        });\n \n        lego.traverse((child) => {\n        if (child instanceof THREE.Mesh) {\n            child.material = material;\n        }\n        });\n        const sz = new THREE.Vector3();\n        lego.children[0].geometry.computeBoundingBox();\n        lego.children[0].geometry.boundingBox.getSize(sz);\n        this.geometryScale = new THREE.Vector3(this.cubeSize*2/sz.x,this.cubeSize/sz.y,this.cubeSize/sz.z);\n        this.material = lego.children[0].material;\n        this.geometry = lego.children[0].geometry;\n    }\n\n    produceCrates(crates) {\n        const count = crates.reduce((acc, {height}) => acc + (this.resolution ** 2 / 2) * height, 0);\n        this.mesh = new THREE.InstancedMesh(this.geometry, this.material, count);\n        this.mesh.castShadow = true;\n        this.mesh.instanceMatrix.setUsage(THREE.StaticDrawUsage);\n        //this.mesh.instanceMatrix.needsUpdate = true;\n        this.scene.add(this.mesh);\n        const result = crates.map((options) => {\n            const {position, height, isDirty} = options;\n            const c = 0xf6a076;\n            const crate = new DestructibleCrate(this.scene, this.game, position, this.mesh, this.offset, this.geometryScale, c, this.size, this.resolution, height);\n            if (isDirty) {\n                crate.applyState(options);\n            }\n            this.offset += crate.cubes.length;\n            return crate;\n        })\n        \n        return result;\n    }\n}\n","// src/game/battlemap.js\n\nimport * as THREE from 'three';\nimport * as CANNON from 'cannon';\nimport Crate from './objects/crate';\nimport { DestructibleCrateFactory } from './factories/destructable_crate_factory';\nimport DestructibleCrate from './objects/destructible_crate';\n\n\nexport default class BattleMap {\n    constructor(scene, game, size = 50, obstaclesLevel = 6, map = null) {\n        this.scene = scene;\n        this.game = game;\n        this.world = game.world;\n        this.size = size;\n        this.fence = [];\n        this.crates = [];\n        this.cratesMeta = [];\n        this.crateSize = 2;\n        this.crateResolution = 6;\n        this.obstaclesLevel = obstaclesLevel;\n        this.map = map;\n        this.spawnPoints = map ? map.spawnPoints : null;\n        this.obstacles = map ? map.obstacles : null;\n        this.crateInstancedMesh = null;\n        // Створюємо ці об'єкти один раз у конструкторі\n        this.tempPosition = new THREE.Vector3();\n        this.tempQuaternion = new THREE.Quaternion();\n        this.tempScale = new THREE.Vector3(1, 1, 1);\n        this.tempMatrix = new THREE.Matrix4();\n        if (!this.map) {\n            this.createMap();\n        }\n        this.createGround();\n        this.createCrateInstancedMesh();\n        this.createFence();\n        this.createObstacles();\n    }\n\n    static fromMap(scene, game, map) {\n        return new BattleMap(scene, game, map.size, map.obstaclesLevel, map);\n    }\n\n    createCrateInstancedMesh() {\n        const geometry = new THREE.BoxGeometry(2, 2, 2);\n\n        const metalTexture = this.game.loader.getTexture(\"crate\").clone();\n        const metalNormalTexture = this.game.loader.getTexture(\"crate_normal\").clone();\n        const metalMetallicTexture = this.game.loader.getTexture(\"crate_metallic\").clone();\n        const metalRoughnessTexture = this.game.loader.getTexture(\"crate_roughness\").clone();\n        const metalAoTexture = this.game.loader.getTexture(\"crate_ao\").clone();\n\n        const crateTexture = this.game.loader.getTexture(\"crate\");\n        const material = new THREE.MeshStandardMaterial({ \n            roughness: 0.8,\n            color: new THREE.Color(0.2,0.2,0.2),\n            metalness: 0.6,\n            map: metalTexture,\n            roughnessMap: metalRoughnessTexture,\n            normalMap: metalNormalTexture,\n            metalnessMap: metalMetallicTexture,\n            aoMap: metalAoTexture,\n         });\n        \n        // Створюємо InstancedMesh з великою кількістю інстансів\n        this.crateInstancedMesh = new THREE.InstancedMesh(geometry, material, 1000);\n        this.crateInstancedMesh.instanceMatrix.setUsage(THREE.StaticDrawUsage);\n        this.crateInstancedMesh.castShadow = true;\n        this.crateInstancedMesh.receiveShadow = true;\n        this.crateInstancedMesh.count = 0;\n        this.scene.add(this.crateInstancedMesh);\n    }\n\n    addCrate(position) {\n        const crate = new Crate(position);\n        this.fence.push(crate);\n        this.world.addBody(crate.body);\n        \n        // Оновлюємо матрицю трансформації для нового інстансу\n        const matrix = new THREE.Matrix4();\n        matrix.setPosition(position.x, position.y, position.z);\n        this.crateInstancedMesh.count = this.fence.length;\n        this.crateInstancedMesh.setMatrixAt(this.fence.length - 1, matrix);\n        this.crateInstancedMesh.instanceMatrix.needsUpdate = true;\n        return crate;\n    }\n\n    createGround() {\n        const grassTexture = this.game.loader.getTexture(\"grass\");\n        grassTexture.wrapS = THREE.RepeatWrapping;\n        grassTexture.wrapT = THREE.RepeatWrapping;\n        grassTexture.repeat.set(5, 5);\n\n        const metalTexture = this.game.loader.getTexture(\"metal\").clone();\n        metalTexture.wrapS = THREE.RepeatWrapping;\n        metalTexture.wrapT = THREE.RepeatWrapping;\n        metalTexture.repeat.set(6, 6);\n\n        const metalNormalTexture = this.game.loader.getTexture(\"metal_normal\").clone();\n        metalNormalTexture.wrapS = THREE.RepeatWrapping;\n        metalNormalTexture.wrapT = THREE.RepeatWrapping;\n        metalNormalTexture.repeat.set(6, 6);\n\n\n        const metalMetallicTexture = this.game.loader.getTexture(\"metal_metallic\").clone();\n        metalMetallicTexture.wrapS = THREE.RepeatWrapping;\n        metalMetallicTexture.wrapT = THREE.RepeatWrapping;\n        metalMetallicTexture.repeat.set(6, 6);\n\n\n        const metalRoughnessTexture = this.game.loader.getTexture(\"metal_roughness\").clone();\n        metalRoughnessTexture.wrapS = THREE.RepeatWrapping;\n        metalRoughnessTexture.wrapT = THREE.RepeatWrapping;\n        metalRoughnessTexture.repeat.set(6, 6);\n\n        const metalAoTexture = this.game.loader.getTexture(\"metal_ao\").clone();\n        metalAoTexture.wrapS = THREE.RepeatWrapping;\n        metalAoTexture.wrapT = THREE.RepeatWrapping;\n        metalAoTexture.repeat.set(6, 6);\n   \n\n        const groundGeometry = new THREE.PlaneGeometry(this.size, this.size);\n        // const reflection = reflector( { resolution: 0.5 } ); // 0.5 is half of the rendering view\n        // reflection.target.rotateX( - Math.PI / 2 );\n        // reflection.uvNode = reflection.uvNode.add( floorNormalOffset );\n\n        const groundMaterial = new THREE.MeshStandardMaterial({\n            roughness: 0.8,\n            color: new THREE.Color(0.2,0.2,0.2),\n            metalness: 0.6,\n            map: metalTexture,\n            roughnessMap: metalRoughnessTexture,\n            normalMap: metalNormalTexture,\n            metalnessMap: metalMetallicTexture,\n            aoMap: metalAoTexture,\n        });\n        this.ground = new THREE.Mesh(groundGeometry, groundMaterial);\n        this.ground.rotation.x = -Math.PI / 2;\n        this.ground.receiveShadow = true;\n        this.scene.add(this.ground);\n\n        const groundShape = new CANNON.Plane();\n        const groundBody = new CANNON.Body({ mass: 0, material: new CANNON.Material({ friction: 1.5, restitution: 0.3 }) });\n        groundBody.addShape(groundShape);\n        groundBody.quaternion.setFromAxisAngle(new CANNON.Vec3(1, 0, 0), -Math.PI / 2);\n        this.world.addBody(groundBody);\n    }\n\n    createFence() {\n        const halfSize = this.size / 2;\n        for (let x = -halfSize; x <= halfSize; x += 2) {\n            this.addCrate(new THREE.Vector3(x, 1, -halfSize));\n            this.addCrate(new THREE.Vector3(x, 1, halfSize));\n        }\n        for (let z = -halfSize + 2; z < halfSize; z += 2) {\n            this.addCrate(new THREE.Vector3(-halfSize, 1, z));\n            this.addCrate(new THREE.Vector3(halfSize, 1, z));\n        }\n        this.crateInstancedMesh.instanceMatrix.needsUpdate = true;\n    }\n\n    createMap() {\n        const gridSize = this.obstaclesLevel;\n        const cellSize = this.size / gridSize;\n        const halfSize = this.size / 2;\n\n        // Визначаємо зони безпеки для танків (тепер їх 4)\n        this.spawnPoints = [\n            // Гравець\n            {\n                box: new THREE.Box3(\n                    new THREE.Vector3(-halfSize, 0, -halfSize),\n                    new THREE.Vector3(-halfSize + cellSize * 1.25, cellSize * 1.25, -halfSize + cellSize * 1.25)\n                ),\n                position: new THREE.Vector3(-25, 0.5, -25),\n                rotation: -3 * Math.PI / 4\n            },\n            // AI 1\n            {\n                box: new THREE.Box3(\n                    new THREE.Vector3(halfSize - cellSize * 1.25, 0, halfSize - cellSize * 1.25),\n                    new THREE.Vector3(halfSize, cellSize * 1.25, halfSize)\n                ),\n                position: new THREE.Vector3(25, 0.5, 25),\n                rotation: Math.PI / 4\n            },\n            // AI 2\n            {\n                box: new THREE.Box3(\n                    new THREE.Vector3(-halfSize, 0, halfSize - cellSize * 1.25),\n                    new THREE.Vector3(-halfSize + cellSize * 1.25, cellSize * 1.25, halfSize)\n                ),\n                position: new THREE.Vector3(-25, 0.5, 25),\n                rotation: 3 * Math.PI / 4\n            },\n            // AI 3\n            {\n                box: new THREE.Box3(\n                    new THREE.Vector3(halfSize - cellSize * 1.25, 0, -halfSize),\n                    new THREE.Vector3(halfSize, cellSize * 1.25, -halfSize + cellSize * 1.25)\n                ),\n                position: new THREE.Vector3(25, 0.5, -25),\n                rotation: -Math.PI / 4\n            }\n        ];\n        const cratesMeta = [];\n        for (let i = 0; i < gridSize; i++) {\n            for (let j = 0; j < gridSize; j++) {\n                if (Math.random() < 0.7) {\n                    const x = (i - gridSize/2 + 0.5) * cellSize;\n                    const z = (j - gridSize/2 + 0.5) * cellSize;\n                    \n                    // Перевіряємо, чи не знаходиться ця позиція в зоні безпеки\n                    const position = new THREE.Vector3(x, 1, z);\n                    if (!this.spawnPoints.some(spawn => spawn.box.containsPoint(position))) {\n                        const height = Math.random() < 0.3 ? this.crateResolution*2 : this.crateResolution;\n                        cratesMeta.push({position: position, height: height, isDirty: false, inactiveCubes: []});\n                    }\n                }\n            }\n        }\n\n        this.obstacles = {\n            [DestructibleCrate.objectId]: {id: DestructibleCrate.objectId, options: {\n                size: this.crateSize,\n                resolution: this.crateResolution,\n                basicCount: 50,\n                crates: cratesMeta\n            }}\n        };\n        this.map = {\n            ...this.map,\n            spawnPoints: this.spawnPoints,\n            obstacles: this.obstacles,\n            obstaclesLevel: this.obstaclesLevel,\n            size: this.size,\n        }\n    }\n\n    getMap() {\n        const map = this.map;\n        map.obstacles[DestructibleCrate.objectId].options.crates = map.\n            obstacles[DestructibleCrate.objectId].options.crates.map((o, i) => {\n            const c = this.crates[i];\n            return {...o, isDirty: c.isDirty, inactiveCubes: c.cubes.filter((cube) => !cube.active).map((cube) => cube.index)}\n        })\n        return map;\n    }\n\n    createObstacles() {\n        const destructible = this.obstacles[DestructibleCrate.objectId].options;\n        const factory = new DestructibleCrateFactory(this.scene, this.game, destructible.size, destructible.resolution, destructible.basicCount)\n        this.crates.push(...factory.produceCrates(destructible.crates));\n    }\n\n    removeCrate(crate) {\n        const idx = this.crates.indexOf(crate);\n        if (idx != -1) {\n            this.crates.splice(idx, 1);\n        }\n    }\n\n    update() {\n        // this.crates.forEach((crate, index) => {\n        //     if (!crate.body) return;\n        //     this.tempPosition.set(\n        //         crate.body.position.x,\n        //         crate.body.position.y,\n        //         crate.body.position.z\n        //     );\n            \n        //     this.tempQuaternion.set(\n        //         crate.body.quaternion.x,\n        //         crate.body.quaternion.y,\n        //         crate.body.quaternion.z,\n        //         crate.body.quaternion.w\n        //     );\n    \n        //     this.tempMatrix.compose(this.tempPosition, this.tempQuaternion, this.tempScale);\n            \n        //     this.crateInstancedMesh.setMatrixAt(index, this.tempMatrix);\n        //     crate.update();\n        // });\n    \n        \n    }\n\n    getSpawnPoints() {\n        return this.spawnPoints.map(spawnPoint => ({\n            position: spawnPoint.position.clone(),\n            rotation: spawnPoint.rotation\n        }));\n    }\n}\n","import * as THREE from 'three';\n\n\nclass Explosion {\n    constructor(scene, position, radius, game, owner) {\n        this.scene = scene;\n        this.position = position;\n        this.radius = radius;\n        this.duration = 1;\n        this.elapsedTime = 0;\n        this.game = game;\n        this.owner = owner;\n\n        this.createExplosionCore();\n        this.createShockwave();\n    }\n\n    createExplosionCore() {\n        const geometry = new THREE.SphereGeometry(this.radius/3, 32, 32);\n        const material = new THREE.MeshPhongMaterial({\n            color: 0xff3300,\n            emissive: 0xff7700,\n            transparent: true,\n            opacity: 0.9\n        });\n        this.core = new THREE.Mesh(geometry, material);\n        this.core.position.copy(this.position);\n        this.scene.add(this.core);\n    }\n\n    createShockwave() {\n        const geometry = new THREE.SphereGeometry(this.radius/3, 32, 32);\n        const material = new THREE.MeshBasicMaterial({\n            color: 0xff9900,\n            transparent: true,\n            opacity: 0.7,\n            side: THREE.DoubleSide\n        });\n        this.shockwave = new THREE.Mesh(geometry, material);\n        this.shockwave.position.copy(this.position);\n        this.shockwave.rotation.x = Math.PI / 2;\n        this.scene.add(this.shockwave);\n    }\n\n    update(deltaTime) {\n        this.elapsedTime += deltaTime;\n        const progress = this.elapsedTime / this.duration;\n\n        if (progress >= 1) {\n            this.remove();\n            return false;\n        }\n\n        // Анімація ядра вибуху\n        const coreScale = 1 + progress * 0.5;\n        this.core.scale.set(coreScale, coreScale, coreScale);\n        this.core.material.opacity = 0.9 * (1 - progress);\n\n        // Анімація ударної хвилі\n        const shockwaveScale = 1 + progress * 2;\n        this.shockwave.scale.set(shockwaveScale, shockwaveScale, shockwaveScale);\n        this.shockwave.material.opacity = 0.7 * (1 - progress);\n\n        return true;\n    }\n\n    remove() {\n        this.scene.remove(this.core);\n        this.scene.remove(this.shockwave);\n        this.scene.remove(this.particles);\n        this.scene.remove(this.light);\n    }\n}\n\nexport default Explosion;","// particleSystem.js\nimport * as THREE from 'three';\n\nlet count = 1;\n\nclass ParticleSystem {\n    constructor(scene, initialPosition, particleCount) {\n        this.scene = scene;\n        this.particleCount = particleCount;\n        this.isFadingOut = false;\n        this.fadeOutDuration = 1; // секунди\n        this.fadeOutTimer = 0;\n        this.activeParticles = 0;\n\n        this.setupParticles(initialPosition);\n    }\n\n    setupParticles(initialPosition) {\n        this.particles = new THREE.BufferGeometry();\n        this.particlePositions = new Float32Array(this.particleCount * 3);\n        this.particleOpacities = new Float32Array(this.particleCount);\n        this.particleSizes = new Float32Array(this.particleCount);\n        this.particleColors = new Float32Array(this.particleCount * 3);\n\n        for (let i = 0; i < this.particleCount; i++) {\n            this.particlePositions[i * 3] = initialPosition.x;\n            this.particlePositions[i * 3 + 1] = initialPosition.y;\n            this.particlePositions[i * 3 + 2] = initialPosition.z;\n            this.particleOpacities[i] = 0;\n            this.particleSizes[i] = 0;\n            this.particleColors[i * 3] = 0.7;     // R\n            this.particleColors[i * 3 + 1] = 0.7; // G\n            this.particleColors[i * 3 + 2] = 0.7;   // B\n        }\n\n        this.particles.setAttribute('position', new THREE.BufferAttribute(this.particlePositions, 3));\n        this.particles.setAttribute('opacity', new THREE.BufferAttribute(this.particleOpacities, 1));\n        this.particles.setAttribute('size', new THREE.BufferAttribute(this.particleSizes, 1));\n        this.particles.setAttribute('color', new THREE.BufferAttribute(this.particleColors, 3));\n\n        this.particleMaterial = new THREE.PointsMaterial({\n            size: 0.2,\n            transparent: true,\n            blending: THREE.AdditiveBlending,\n            depthWrite: false,\n            vertexColors: true,\n            sizeAttenuation: true\n        });\n\n        this.particleSystem = new THREE.Points(this.particles, this.particleMaterial);\n        this.scene.add(this.particleSystem);\n    }\n\n    update(deltaTime, currentPosition, previousPosition) {\n        if (this.isFadingOut) {\n            this.updateFadeOut(deltaTime);\n        } else {\n            this.updateActiveParticles(deltaTime, currentPosition, previousPosition);\n        }\n\n        // Оновлення буферів\n        this.particles.attributes.position.needsUpdate = true;\n        this.particles.attributes.opacity.needsUpdate = true;\n        this.particles.attributes.size.needsUpdate = true;\n        this.particles.attributes.color.needsUpdate = true;\n    }\n\n    updateActiveParticles(deltaTime, currentPosition, previousPosition) {\n        const velocity = new THREE.Vector3().subVectors(currentPosition, previousPosition).divideScalar(deltaTime);\n        const speed = velocity.length();\n\n        // Збільшуємо кількість активних частинок\n        this.activeParticles = Math.min(this.activeParticles + 2, this.particleCount);\n\n        // Зсуваємо всі частинки назад\n        for (let i = this.activeParticles - 1; i > 0; i--) {\n            this.particlePositions[i * 3] = this.particlePositions[(i - 1) * 3];\n            this.particlePositions[i * 3 + 1] = this.particlePositions[(i - 1) * 3 + 1];\n            this.particlePositions[i * 3 + 2] = this.particlePositions[(i - 1) * 3 + 2];\n            \n            // Оновлюємо прозорість та розмір частинок\n            const fadeRate = 0.95;\n            this.particleOpacities[i] = this.particleOpacities[i - 1] * fadeRate;\n            this.particleSizes[i] = this.particleSizes[i - 1] * fadeRate;\n\n            // Оновлюємо колір частинок (від яскравого до темного)\n            const colorFade = 1 - (i / this.activeParticles);\n            this.particleColors[i * 3] = 0.7 * colorFade;     // R\n            this.particleColors[i * 3 + 1] = 0.7 * colorFade; // G\n            this.particleColors[i * 3 + 2] = 0.7 * colorFade;   // B\n        }\n\n        // Оновлюємо першу частинку\n        this.particlePositions[0] = currentPosition.x;\n        this.particlePositions[1] = currentPosition.y;\n        this.particlePositions[2] = currentPosition.z;\n        this.particleOpacities[0] = Math.min(speed / 5, 1);\n        this.particleSizes[0] = Math.min(speed / 2, 0.4);\n\n        // Додаємо випадкове відхилення для активних частинок\n        for (let i = 1; i < this.activeParticles; i++) {\n            if (Math.random() < 0.2) {\n                this.particlePositions[i * 3] += (Math.random() - 0.5) * 0.15;\n                this.particlePositions[i * 3 + 1] += (Math.random() - 0.5) * 0.15;\n                this.particlePositions[i * 3 + 2] += (Math.random() - 0.5) * 0.15;\n            }\n        }\n\n        // Застосовуємо ефект затухання для активних частинок\n        for (let i = 0; i < this.activeParticles; i++) {\n            const fade = Math.pow(1 - (i / this.activeParticles), 0.5);\n            this.particleOpacities[i] *= fade;\n        }\n\n        // Встановлюємо нульову прозорість для неактивних частинок\n        for (let i = this.activeParticles; i < this.particleCount; i++) {\n            this.particleOpacities[i] = 0;\n            this.particleSizes[i] = 0;\n        }\n    }\n\n    updateFadeOut(deltaTime) {\n        this.fadeOutTimer += deltaTime;\n        const fadeProgress = this.fadeOutTimer / this.fadeOutDuration;\n\n        if (fadeProgress >= 1) {\n            this.scene.remove(this.particleSystem);\n            return;\n        }\n\n        const opacity = 1-fadeProgress;\n        this.particleMaterial.opacity = opacity;\n    }\n\n    remove() {\n        this.scene.remove(this.particleSystem);\n    }\n\n\n    startFadeOut() {\n        this.isFadingOut = true;\n    }\n}\n\nexport default ParticleSystem;","\nexport const findContact = (contacts, targetBodyId) => {\n    const c = contacts.find((c) => {\n        if (c.bi.id !== targetBodyId && c.bj.id !== targetBodyId) return false;\n        return (c.bi.collisionFilterGroup & c.bj.collisionFilterMask)===c.bi.collisionFilterGroup && (c.bj.collisionFilterGroup & c.bi.collisionFilterMask)===c.bj.collisionFilterGroup;\n    });\n    if (!c) return null;\n    return {\n        contact: c,\n        target: c.bi.id == targetBodyId ?  c.bi : c.bj,\n        body: c.bi.id == targetBodyId ?  c.bj : c.bi,\n    }\n}\n","// projectile.js\nimport * as THREE from 'three';\nimport * as CANNON from 'cannon';\nimport Explosion from '../effects/explosion';\nimport ParticleSystem from '../effects/particle_system';\nimport { findContact } from '../utils/contact';\n\nclass Projectile {\n    constructor(scene, world, position, direction, initialVelocity, velocityFactor, game, owner) {\n        this.scene = scene;\n        this.world = world;\n        this.game = game;\n        this.isDestroyed = false;\n        this.initialVelocity = initialVelocity;\n        this.velocityFactor = velocityFactor;\n        this.owner = owner;\n\n        // Створюємо 3D модель снаряду\n        const geometry = new THREE.SphereGeometry(0.2, 16, 16);\n        const material = new THREE.MeshPhongMaterial({ color: 0xff0000 });\n        this.mesh = new THREE.Mesh(geometry, material);\n        this.mesh.position.copy(position);\n        this.scene.add(this.mesh);\n\n        // Створюємо фізичне тіло для снаряду\n        const shape = new CANNON.Sphere(0.2);\n        this.body = new CANNON.Body({\n            mass: 5,\n            shape: shape,\n            position: new CANNON.Vec3(position.x, position.y, position.z),\n            velocity: new CANNON.Vec3(\n                direction.x * initialVelocity,\n                direction.y * initialVelocity,\n                direction.z * initialVelocity\n            )\n        });\n\n        // Додаємо гравітацію до снаряду\n        this.body.force.set(0, -9.82 * this.body.mass, 0)\n\n        this.world.addBody(this.body);\n\n        // Створюємо систему частинок для сліду\n        this.particleCount = 50;\n        if (!this.game.headless) this.particleSystem = new ParticleSystem(scene, position, this.particleCount);\n\n        // Зберігаємо попередню позицію для розрахунку швидкості\n        this.previousPosition = position.clone();\n    }\n\n    onCollide(event) {\n        if (this.isDestroyed) return;\n        if (event.body.isCrate && (this.game.isSinglePlayer || this.game.headless)) {\n            let localPoint = new CANNON.Vec3();\n            event.body.pointToLocalFrame(event.contact.bj.position.clone().vadd(event.contact.rj), localPoint);\n                const crate = this.game.battleMap.crates.find((c) => c.body === event.body);\n                this.game.damageCrate(this.mesh.position, localPoint, 1, crate);\n        }\n        const explosionRadius = 1.5; // Можна змінювати за потребою\n        this.explode(explosionRadius);\n    }\n\n    explode(radius) {\n        if (this.isDestroyed) return;\n        this.isDestroyed = true;\n    \n        const explosion = new Explosion(this.scene, this.mesh.position, radius, this.game, this.owner);\n        this.game.addExplosion(explosion);\n    \n        const explosionPos = new CANNON.Vec3().copy(this.body.position);\n        if (this.game.isSinglePlayer || this.game.headless) {\n            // Перевіряємо всі танки на пошкодження\n            this.game.tanks.forEach(tank => {\n                const tankPos = tank.body.position;\n                const distance = explosionPos.distanceTo(tankPos);\n                if (distance <= radius * 2 || tank.isPointInsideTank(explosionPos)) {\n                    const damage = this.calculateDamage(distance, radius);\n                    this.game.damageTank(damage, tank, radius, this.mesh.position, this.owner);\n                }\n            });\n        }\n    \n        // Починаємо затухання системи частинок\n        if (!this.game.headless) this.particleSystem.startFadeOut();\n        this.remove();\n    }\n\n    update(deltaTime) {\n        // Оновлюємо позицію 3D моделі відповідно до фізичного тіла\n        this.mesh.position.copy(this.body.position);\n        this.mesh.quaternion.copy(this.body.quaternion);\n\n        // Оновлюємо систему частинок\n        if (!this.game.headless) this.particleSystem.update(deltaTime, this.mesh.position, this.previousPosition);\n\n        // Оновлюємо попередню позицію\n        this.previousPosition.copy(this.mesh.position);\n        const contact = findContact(this.world.contacts, this.body.id);\n        if (contact) this.onCollide(contact);\n    }\n\n    calculateDamage(distance, radius) {\n        const maxDistanceDamage = 25;\n        const velocityMaxBonusDamage = 20;\n        \n        const velocityFactor = this.velocityFactor;\n        \n        // Якщо вибух стався всередині танка, наносимо максимальні пошкодження\n        if (distance === 0) {\n            return Math.round(maxDistanceDamage + velocityMaxBonusDamage * velocityFactor);\n        }\n        \n        // Інакше, розраховуємо пошкодження залежно від відстані та швидкості\n        const distanceFactor = 1 - distance / (radius * 2);\n        console.log(`Deal ${Math.round(maxDistanceDamage * distanceFactor + velocityMaxBonusDamage * velocityFactor)} damage. Velocity bonus: ${velocityMaxBonusDamage * velocityFactor}`);\n        return Math.round(maxDistanceDamage * distanceFactor + velocityMaxBonusDamage * velocityFactor);\n    }\n\n    remove() {\n        // Видаляємо снаряд зі сцени та фізичного світу\n        this.scene.remove(this.mesh);\n        this.world.removeBody(this.body);\n        \n        // Починаємо затухання системи частинок\n        if (!this.game.headless) this.triggerParticles();\n    }\n\n    triggerParticles() {\n        this.particleSystem.startFadeOut();\n        this.game.addFadingParticleSystem(this.particleSystem);\n    }\n\n    createDestroyedTankEffect(tank, radius) {\n        this.game.createDestroyedTankEffect(tank, this.mesh.position, radius)\n    }\n\n    createDestroyedCrateEffect(crate, count, deepPosition) {\n        this.game.createDestroyedCrateEffect(crate, count, this.mesh.position, deepPosition);\n    }\n}\n\nexport default Projectile;","import * as CANNON from 'cannon';\n\n\nCANNON.Quaternion.prototype.slerp = function( qb, t ) {\n\n    if ( t === 0 ) return this;\n    if ( t === 1 ) return this.copy( qb );\n\n    const x = this._x, y = this._y, z = this._z, w = this._w;\n\n    // http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\n    let cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\n\n    if ( cosHalfTheta < 0 ) {\n\n        this._w = - qb._w;\n        this._x = - qb._x;\n        this._y = - qb._y;\n        this._z = - qb._z;\n\n        cosHalfTheta = - cosHalfTheta;\n\n    } else {\n\n        this.copy( qb );\n\n    }\n\n    if ( cosHalfTheta >= 1.0 ) {\n\n        this._w = w;\n        this._x = x;\n        this._y = y;\n        this._z = z;\n\n        return this;\n\n    }\n\n    const sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;\n\n    if ( sqrSinHalfTheta <= Number.EPSILON ) {\n\n        const s = 1 - t;\n        this._w = s * w + t * this._w;\n        this._x = s * x + t * this._x;\n        this._y = s * y + t * this._y;\n        this._z = s * z + t * this._z;\n\n        this.normalize(); // normalize calls _onChangeCallback()\n\n        return this;\n\n    }\n\n    const sinHalfTheta = Math.sqrt( sqrSinHalfTheta );\n    const halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );\n    const ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,\n        ratioB = Math.sin( t * halfTheta ) / sinHalfTheta;\n\n    this._w = ( w * ratioA + this._w * ratioB );\n    this._x = ( x * ratioA + this._x * ratioB );\n    this._y = ( y * ratioA + this._y * ratioB );\n    this._z = ( z * ratioA + this._z * ratioB );\n\n    return this;\n\n}","// tank.js\nimport * as THREE from 'three';\nimport * as CANNON from 'cannon';\nimport Projectile from './projectile';\nimport './../utils/slerp';\n\nexport default class Tank {\n    static objectId = 4;\n    constructor(scene, world, game, color, position, rotation) {\n        this.id = game.generateTankId();\n        this.scene = scene;\n        this.world = world;\n        this.game = game;\n        this.color = color;\n        this.position = position;\n        this.rotation = rotation;\n        this.scale = 1.5;\n\n        this.health = 100;\n        this.maxHealth = 100;\n\n\n        this.moveDirection = 0;\n        this.rotateDirection = 0;\n        this.turnSpeed = .75;\n        this.currentSpeed = 0;\n        this.currentTurnSpeed = 0;\n        this.maxSpeed = 30;\n        this.acceleration = 60; // units per second^2\n        this.deceleration = 60; // units per second^2\n        this.turnAcceleration = 2; // radians per second^2\n        this.turnDeceleration = 3; // radians per second^2\n        this.isDestroyed = false;\n\n        this.barrelPivot = null;\n        this.barrelAngle = 0;\n        this.barrelRotationSpeed = 0.1; // radian\n\n        this.maxRotationPerFrame = Math.PI / 30; // Максимальний кут обертання за кадр\n\n        this.indirectBarrelMinAngle = Math.PI / 9; // 20 градусів\n        this.indirectBarrelMaxAngle =  Math.PI / 4;\n        this.indirectFireInitialAngle = this.indirectBarrelMaxAngle - this.indirectBarrelMinAngle / 2;\n        \n        this.directBarrelMinAngle = -Math.PI / 24;\n        this.directBarrelMaxAngle = 0; \n        this.directFireInitialAngle = this.directBarrelMaxAngle;\n        \n        this.barrelMaxAngle = this.directBarrelMaxAngle; \n        this.barrelMinAngle = this.directBarrelMinAngle;\n\n        this.turretRotation = 0;\n        this.turretRotationSpeed = 0.1; // радіани\n\n        \n        this.minShotVelocityDirect = 10;\n        this.maxShotVelocityDirect = 60;\n\n        this.minShotVelocityIndirect = 5;\n        this.maxShotVelocityIndirect = 25;\n\n        this.shotVelocity = this.minShotVelocityDirect;\n        this.minShotVelocity = this.minShotVelocityDirect;\n        this.maxShotVelocity = this.maxShotVelocityDirect;\n\n        this.targetTurretAngle = 0;\n        this.targetBarrelAngle = 0;\n        this.isIndirectFireMode = false;\n        this.barrelTransitionSpeed = 70; // Швидкість переходу дула\n        this.isChangingMode = false;\n\n        this.scale = 1.5;\n        this.isTransitioning = false;\n        this.transitionProgress = 0;\n        this.transitionDuration = 500; // 0.5 секунд у мілісекундах\n        this.originalDimensions = new THREE.Vector3(1, 0.5, 2);\n        this.squareDimensions = new THREE.Vector3(1.5, 0.5, 1.5);\n        this.isAcceleratingShot = false;\n\n        this.serverState = {\n            position: new CANNON.Vec3(0,0,0),\n            quaternion: new CANNON.Quaternion(0,0,0),\n            velocity: new CANNON.Vec3(0,0,0),\n            angularVelocity: new CANNON.Vec3(0,0,0),\n            targetBarrelAngle: null,\n            targetTurretAngle: null,\n            shotVelocity: null,\n            isIndirectFireMode: null,\n            isTransitioning: null,\n            isAcceleratingShot: null,\n        };\n        this.lastUpdateTime = null;\n        this.serverUpdateDelta = 0;\n        this.interpolationTime = 50;\n\n\n        this.createMesh();\n        this.createPhysicsBody();\n    }\n\n    getStateData() {\n        return {\n            shotVelocity: this.shotVelocity,\n            isIndirectFireMode: this.isIndirectFireMode,\n            isAcceleratingShot: this.isAcceleratingShot,\n            isTransitioning: this.isTransitioning,\n            targetBarrelAngle: this.targetBarrelAngle,\n            targetTurretAngle: this.targetTurretAngle,\n            position: this.body.position,\n            quaternion: this.body.quaternion,\n            velocity: this.body.velocity,\n            angularVelocity: this.body.angularVelocity,\n            isDestroyed: this.isDestroyed,\n        }\n    }\n\n    // Новий метод для початку переходу\n    startTransition(toIndirect) {\n        if (toIndirect == this.isIndirectFireMode) return;\n        if (this.isTransitioning) return;\n        \n        this.isTransitioning = true;\n        this.transitionProgress = 0;\n        this.isIndirectFireMode = toIndirect;\n    }\n\n    setIndirectFireMode(isIndirect) {\n        this.isIndirectFireMode = isIndirect;\n        this.isChangingMode = true;\n        if (isIndirect) {\n            this.shotVelocity = this.minShotVelocityIndirect;\n            this.minShotVelocity = this.minShotVelocityIndirect;\n            this.maxShotVelocity = this.maxShotVelocityIndirect;\n            this.barrelMinAngle = this.indirectBarrelMinAngle;\n            this.barrelMaxAngle =  this.indirectBarrelMaxAngle;\n            this.targetBarrelAngle = this.indirectFireInitialAngle;\n        } else {\n            this.barrelMinAngle = this.directBarrelMinAngle;\n            this.barrelMaxAngle = this.directBarrelMaxAngle;\n            this.targetBarrelAngle = this.directFireInitialAngle;\n            this.shotVelocity = this.minShotVelocityDirect;\n            this.minShotVelocity = this.minShotVelocityDirect;\n            this.maxShotVelocity = this.maxShotVelocityDirect;\n        }\n    }\n\n    rotateTurretLeft(deltaTime) {\n        this.turretRotation += this.turretRotationSpeed;\n        this.updateTurretRotation(deltaTime);\n    }\n    \n    rotateTurretRight(deltaTime) {\n        this.turretRotation -= this.turretRotationSpeed;\n        this.updateTurretRotation(deltaTime);\n    }\n\n    takeDamage(amount, dealer) {\n        this.health = Math.max(0, this.health - amount);\n        console.log(`Tank took ${amount} damage from ${dealer.id}. Current health: ${this.health}`);\n    }\n\n    updateServerState(state, timestamp) {\n        this.serverState.position.copy(state.position);\n        this.serverState.quaternion.copy(state.quaternion);\n        this.serverState.velocity.copy(state.velocity);\n        this.serverState.angularVelocity.copy(state.angularVelocity);\n        this.serverState.targetBarrelAngle = state.targetBarrelAngle;\n        this.serverState.targetTurretAngle = state.targetTurretAngle;\n        this.serverState.shotVelocity = state.shotVelocity;\n        this.serverState.isIndirectFireMode = state.isIndirectFireMode;\n        this.serverState.isTransitioning = state.isTransitioning;\n        this.serverState.isAcceleratingShot = state.isAcceleratingShot;\n        this.serverState.isDestroyed = state.isDestroyed;\n        this.lastUpdateTime = timestamp;\n    }\n\n    interpolate(currentTime) {       \n        const delta = currentTime - this.lastUpdateTime;\n        const alpha = Math.min(delta / this.interpolationTime, 1);\n        \n        if (!this.serverState.isDestroyed) {\n            // Інтерполяція позиції\n            this.body.position.lerp(this.serverState.position, alpha, this.body.position);\n        \n            // Інтерполяція обертання\n            this.body.quaternion.slerp(this.serverState.quaternion, alpha);\n        }\n        this.body.velocity.copy(this.serverState.velocity)\n        // Інтерполяція швидкості\n        //this.body.velocity.lerp(this.serverState.velocity, alpha, this.body.velocity);\n        this.body.angularVelocity.copy(this.serverState.angularVelocity)\n        // Інтерполяція кутової швидкості\n        //this.body.angularVelocity.lerp(this.serverState.angularVelocity, alpha, this.body.angularVelocity);\n        this.targetBarrelAngle =  this.serverState.targetBarrelAngle;\n        this.targetTurretAngle =  this.serverState.targetTurretAngle;\n        if (this.serverState.isTransitioning != this.isTransitioning) {\n            this.startTransition(this.serverState.isIndirectFireMode)\n        }\n        if (!this.isTransitioning && this.serverState.isIndirectFireMode != this.isIndirectFireMode) {\n            this.setIndirectFireMode(this.serverState.isIndirectFireMode)\n        }\n        this.isDestroyed = this.serverState.isDestroyed;\n        this.isAcceleratingShot = this.serverState.isAcceleratingShot\n        this.shotVelocity = this.serverState.shotVelocity\n    }\n\n    extrapolate(currentTime) {   \n        const delta = (currentTime - this.lastUpdateTime) / 1000; // перетворюємо в секунди\n        // Екстраполяція позиції\n        const extrapolatedPosition = new CANNON.Vec3();\n        extrapolatedPosition.copy(this.serverState.position);\n        extrapolatedPosition.vadd(this.serverState.velocity.scale(delta), extrapolatedPosition);\n        this.body.position.copy(extrapolatedPosition);\n    \n        // Екстраполяція обертання\n        const extrapolatedQuaternion = new CANNON.Quaternion();\n        const angularVelocityLength = this.serverState.angularVelocity.length();\n        if (angularVelocityLength > 0) {\n            const axis = this.serverState.angularVelocity.unit();\n            const angle = angularVelocityLength * delta;\n            extrapolatedQuaternion.setFromAxisAngle(axis, angle);\n            extrapolatedQuaternion.mult(this.serverState.quaternion, extrapolatedQuaternion);\n        } else {\n            extrapolatedQuaternion.copy(this.serverState.quaternion);\n        }\n        this.body.quaternion.copy(extrapolatedQuaternion);\n    \n        // Зберігаємо швидкості\n        this.body.velocity.copy(this.serverState.velocity);\n        this.body.angularVelocity.copy(this.serverState.angularVelocity);\n        this.targetBarrelAngle =  this.serverState.targetBarrelAngle;\n        this.targetTurretAngle =  this.serverState.targetTurretAngle;\n        this.targetBarrelAngle =  this.serverState.targetBarrelAngle;\n        this.targetTurretAngle =  this.serverState.targetTurretAngle;\n        if (this.serverState.isTransitioning != this.isTransitioning) {\n            this.startTransition(this.serverState.isIndirectFireMode)\n        }\n        if (!this.isTransitioning && this.serverState.isIndirectFireMode != this.isIndirectFireMode) {\n            this.setIndirectFireMode(this.serverState.isIndirectFireMode)\n        }\n        this.serverState.isAcceleratingShot = this.isAcceleratingShot\n        this.serverState.shotVelocity = this.shotVelocity\n    }\n\n    updateTurretRotation(deltaTime) {\n        let turretAngleDiff = this.targetTurretAngle - this.turretRotation;\n        \n        // Нормалізуємо різницю кутів\n        if (turretAngleDiff > Math.PI) turretAngleDiff -= 2 * Math.PI;\n        if (turretAngleDiff < -Math.PI) turretAngleDiff += 2 * Math.PI;\n        \n        // Обмежуємо максимальний кут обертання за кадр\n        const maxRotation = this.maxRotationPerFrame * (deltaTime / 16.67);\n        const rotation = Math.sign(turretAngleDiff) * Math.min(Math.abs(turretAngleDiff), maxRotation);\n        \n        this.turretRotation += rotation;\n        while (this.turretRotation > Math.PI) this.turretRotation -= 2 * Math.PI;\n        while (this.turretRotation < -Math.PI) this.turretRotation += 2 * Math.PI;\n        // Нормалізуємо кут обертання башти\n        this.turret.rotation.y = this.turretRotation;\n    }\n\n    updateBarrelRotation(deltaTime) {\n        const barrelAngleDiff = this.targetBarrelAngle - this.barrelAngle\n        // Плавно змінюємо кут дула\n        this.barrelAngle += barrelAngleDiff * (this.barrelTransitionSpeed * (deltaTime / 16.67));\n        // Обмежуємо кут дула\n        this.barrelAngle = this.isChangingMode ? this.barrelAngle : Math.max(this.barrelMinAngle, Math.min(this.barrelAngle, this.barrelMaxAngle));\n        this.barrelPivot.rotation.x = this.barrelAngle;\n        if (this.isChangingMode && Math.floor(this.barrelAngle*100) === Math.floor((this.isIndirectFireMode ? \n            this.indirectFireInitialAngle : this.directFireInitialAngle)*100)) {\n            this.isChangingMode = false;\n        }\n    }\n\n    createMesh() {\n        // Створюємо основне тіло танка\n        const bodyGeometry = new THREE.BoxGeometry(1, 0.5, 2);\n        const bodyMaterial = new THREE.MeshStandardMaterial({\n            color: this.color,\n            roughness: 0.1,\n            metalness: 0.7\n        });\n\n        this.bodyMesh = new THREE.Mesh(bodyGeometry, bodyMaterial);\n        this.bodyMesh.scale.multiplyScalar(this.scale);\n        this.bodyMesh.castShadow = true;\n\n        // Створюємо групу для всього танка\n        this.mesh = new THREE.Group();\n        this.mesh.add(this.bodyMesh);\n\n        this.mesh.position.copy(this.position);\n        this.mesh.rotation.y = this.rotation;\n        this.mesh.rotation.order = \"YXZ\";\n        \n\n        // Створюємо башту танка\n        const turretGeometry = new THREE.CylinderGeometry(0.4 * this.scale, 0.4 * this.scale, 0.3 * this.scale, 16);\n        const turretMaterial = new THREE.MeshStandardMaterial({\n            color: this.color,\n            roughness: 0.1,\n            metalness: 0.7\n        });\n        this.turret = new THREE.Mesh(turretGeometry, turretMaterial);\n        this.turret.position.set(0, 0.4 * this.scale, 0); // Підняли башту трохи вище\n        this.turret.castShadow = true;\n        this.mesh.add(this.turret);\n\n        // Створюємо дуло танка\n        const barrelGeometry = new THREE.CylinderGeometry(0.1 * this.scale, 0.1 * this.scale, 1.5 * this.scale, 8);\n        const barrelMaterial = new THREE.MeshStandardMaterial({\n            color: 0x666666,\n            roughness: 0.1,\n            metalness: 0.7\n        });\n        const barrel = new THREE.Mesh(barrelGeometry, barrelMaterial);\n        barrel.castShadow = true;\n        \n        // Створюємо порожній об'єкт, який буде використовуватися як точка обертання\n        this.barrelPivot = new THREE.Object3D();\n        this.barrelPivot.position.set(0, 0.15 * this.scale, 0);\n        \n        // Розташовуємо дуло відносно точки обертання\n        barrel.position.set(0, 0, -0.75 * this.scale);\n        barrel.rotation.x = -Math.PI / 2; // Повертаємо дуло горизонтально\n        \n        // Додаємо дуло до точки обертання\n        this.barrelPivot.add(barrel);\n        \n        // Додаємо точку обертання з дулом до башти\n        this.turret.add(this.barrelPivot);\n\n        // Додаємо весь танк до сцени\n        this.scene.add(this.mesh);\n    }\n\n    createPhysicsBody() {\n        const shape = new CANNON.Box(new CANNON.Vec3(\n            this.originalDimensions.x * this.scale / 2,\n            this.originalDimensions.y * this.scale / 2,\n            this.originalDimensions.z * this.scale / 2\n        ));\n        this.body = new CANNON.Body({ \n            mass: 1000 * this.scale, // Збільшуємо масу пропорційно до розміру\n            material: new CANNON.Material({ friction: 1.5, restitution: 0.3 }),\n            collisionFilterGroup: 1,\n            collisionFilterMask: 1 | 2,\n        });\n        this.body.addShape(shape);\n        this.body.position.copy(this.position);\n        this.body.quaternion.setFromEuler(0, this.rotation, 0);\n        this.body.linearDamping = 0.5;\n        this.body.angularDamping = 0.9;\n\n        this.body.fixedRotation = true;\n        this.body.updateMassProperties();\n\n        this.world.addBody(this.body);\n    }\n\n    setOriginalBodyState() {\n        this.bodyMesh.scale.set(\n            this.scale,\n            this.scale,\n            this.scale\n        );\n\n        const halfExtents = new CANNON.Vec3(\n            this.originalDimensions.x * this.scale / 2,\n            this.originalDimensions.y * this.scale / 2,\n            this.originalDimensions.z * this.scale / 2\n        );\n        \n        this.body.shapes[0].halfExtents = halfExtents;\n        this.body.shapes[0].updateConvexPolyhedronRepresentation();\n        this.body.updateBoundingRadius();\n    }\n\n    setSquareBodyState() {\n        this.bodyMesh.scale.set(\n            this.scale,\n            this.scale,\n            this.scale\n        );\n\n        const halfExtents = new CANNON.Vec3(\n            this.squareDimensions.x * this.scale / 2,\n            this.squareDimensions.y * this.scale / 2,\n            this.squareDimensions.z * this.scale / 2\n        );\n        \n        this.body.shapes[0].halfExtents = halfExtents;\n        this.body.shapes[0].updateConvexPolyhedronRepresentation();\n        this.body.updateBoundingRadius();\n    }\n\n    updateTransition(deltaTime) {\n        this.transitionProgress += deltaTime * 1000;\n        const t = Math.min(this.transitionProgress / this.transitionDuration, 1);\n        \n        // Інтерполяція між оригінальними та квадратними розмірами\n        const currentDimensions = new THREE.Vector3();\n        currentDimensions.lerpVectors(\n            this.originalDimensions,\n            this.squareDimensions,\n            this.isIndirectFireMode ? t : 1 - t\n        );\n        \n        // Оновлення лише основи танка (bodyMesh)\n        this.bodyMesh.scale.set(\n            currentDimensions.x / this.originalDimensions.x * this.scale,\n            this.scale,\n            currentDimensions.z / this.originalDimensions.z * this.scale\n        );\n        \n        // Оновлення позиції башти, щоб вона залишалася на верху основи\n        this.turret.position.y = this.bodyMesh.scale.y / 2;\n        \n        // Оновлення фізичного тіла\n        const halfExtents = new CANNON.Vec3(\n            currentDimensions.x * this.scale / 2,\n            this.originalDimensions.y * this.scale / 2,\n            currentDimensions.z * this.scale / 2\n        );\n        \n        this.body.shapes[0].halfExtents = halfExtents;\n        this.body.shapes[0].updateConvexPolyhedronRepresentation();\n        this.body.updateBoundingRadius();\n        \n        if (t === 1) {\n            this.setIndirectFireMode(this.isIndirectFireMode);\n            this.isTransitioning = false;\n        }\n    }\n\n    heal(amount) {\n        this.health = Math.min(this.health + amount, this.maxHealth);\n        console.log(`Tank healed for ${amount}. Current health: ${this.health}`);\n    }\n\n    update(deltaTime) {\n        if (this.isTransitioning) {\n            this.updateTransition(deltaTime);\n        }\n\n        if (this.isAcceleratingShot) {\n            const step = (this.maxShotVelocity-this.minShotVelocity)/2*deltaTime;\n            this.shotVelocity = Math.min(this.shotVelocity+step, this.maxShotVelocity);\n        }\n\n        const currentTime = Date.now();\n        if (this.lastUpdateTime) {\n            if (currentTime < this.lastUpdateTime + this.interpolationTime) {\n                this.interpolate(currentTime);\n            } else {\n                this.interpolate(currentTime);\n            }\n        }\n\n\n        this.mesh.position.copy(this.body.position);\n        this.mesh.quaternion.copy(this.body.quaternion);\n        \n        //this.mesh.rotation.setFromQuaternion(this.mesh.quaternion);\n        // Плавне прискорення/сповільнення\n        // if (Math.abs(this.currentSpeed) > 0.01) {\n        //     this.currentSpeed *= 0.95;\n        // } else {\n        //     this.currentSpeed = 0;\n        // }\n\n        // if (Math.abs(this.currentTurnSpeed) > 0.01) {\n        //     this.currentTurnSpeed *= 0.95;\n        // } else {\n        //     this.currentTurnSpeed = 0;\n        // }\n\n        // Плавно повертаємо башту до цільового кута\n        let turretAngleDiff = this.targetTurretAngle - this.turretRotation;\n        \n        // Забезпечуємо, щоб різниця кутів була в межах [-PI, PI]\n        if (turretAngleDiff > Math.PI) turretAngleDiff -= 2 * Math.PI;\n        if (turretAngleDiff < -Math.PI) turretAngleDiff += 2 * Math.PI;\n        \n        this.turretRotation += turretAngleDiff * 0.1; // Можна налаштувати швидкість повороту\n\n        // Нормалізуємо кут обертання башти\n        this.turretRotation = (this.turretRotation + Math.PI) % (2 * Math.PI) - Math.PI;\n\n        // Плавно нахиляємо дуло до цільового кута\n        // const barrelAngleDiff = this.targetBarrelAngle - this.barrelAngle;\n        // this.barrelAngle += barrelAngleDiff * 0.1; // Можна налаштувати швидкість нахилу\n        this.setMoveSpeed(deltaTime);\n        this.setRotateSpeed(deltaTime);\n        \n        this.applyMovement(deltaTime);\n        this.updateTurretRotation(deltaTime);\n        this.updateBarrelRotation(deltaTime);\n    }\n\n    applyMovement(deltaTime) {\n        if (this.isTransitioning || this.isIndirectFireMode) return;\n        const forward = new CANNON.Vec3(0, 0, -1);\n        const result = new CANNON.Vec3(0, 0, 0);\n        this.body.vectorToWorldFrame(forward, result);\n        result.y = 0;\n        result.normalize();\n        const velocity = result.scale(this.currentSpeed);\n        velocity.y = this.body.velocity.y;\n        this.body.velocity.copy(velocity);\n    \n        this.body.angularVelocity.set(0, -this.currentTurnSpeed, 0);\n    }\n\n    applyState(state) {\n        this.body.position.copy(state.position);\n        this.body.quaternion.copy(state.quaternion);\n        this.body.angularVelocity.copy(state.angularVelocity);\n        this.body.velocity.copy(state.velocity);\n\n        this.turretRotation = state.turretRotation;\n        this.turret.rotation.y = state.turretRotation;\n        this.targetTurretAngle = state.turretRotation;\n\n        this.barrelAngle = state.barrelAngle;\n        this.barrelPivot.rotation.x = state.barrelAngle;\n        this.targetBarrelAngle = state.barrelAngle;\n\n        this.isIndirectFireMode = state.isIndirectFireMode;\n        if (!state.isIndirectFireMode) {\n            this.setOriginalBodyState();\n        } else {\n            this.setSquareBodyState();\n        }\n        this.isAcceleratingShot = state.isAcceleratingShot;\n        this.shotVelocity = state.shotVelocity;\n        this.isDestroyed = state.isDestroyed;\n        this.health = state.hp;\n        this.mesh.visible = state.visible;\n    }\n\n    move(direction) {\n        if (this.isIndirectFireMode) return;\n        this.moveDirection = direction;\n    }\n\n    setMoveSpeed(deltaTime) {\n        const targetSpeed = Math.sign(this.moveDirection) * this.maxSpeed;\n        if (Math.sign(this.moveDirection) !== 0) {\n            const accelerationThisFrame = this.acceleration * deltaTime;\n            this.currentSpeed = Math.sign(targetSpeed - this.currentSpeed) * \n                Math.min(Math.abs(targetSpeed - this.currentSpeed), accelerationThisFrame) + \n                this.currentSpeed;\n        } else {\n            const decelerationThisFrame = this.deceleration * deltaTime;\n            if (Math.abs(this.currentSpeed) <= decelerationThisFrame) {\n                this.currentSpeed = 0;\n            } else {\n                this.currentSpeed -= Math.sign(this.currentSpeed) * decelerationThisFrame;\n            }\n        }\n    }\n\n    rotate(direction) {\n        if (this.isIndirectFireMode) return;\n        this.rotateDirection = direction;\n    }\n\n    setRotateSpeed(deltaTime) {\n        const targetTurnSpeed = Math.sign(this.rotateDirection) * this.turnSpeed;\n        if (Math.sign(this.rotateDirection) !== 0) {\n            const accelerationThisFrame = this.turnAcceleration * deltaTime;\n            this.currentTurnSpeed = Math.sign(targetTurnSpeed - this.currentTurnSpeed) * \n                Math.min(Math.abs(targetTurnSpeed - this.currentTurnSpeed), accelerationThisFrame) + \n                this.currentTurnSpeed;\n        } else {\n            const decelerationThisFrame = this.turnDeceleration * deltaTime;\n            if (Math.abs(this.currentTurnSpeed) <= decelerationThisFrame) {\n                this.currentTurnSpeed = 0;\n            } else {\n                this.currentTurnSpeed -= Math.sign(this.currentTurnSpeed) * decelerationThisFrame;\n            }\n        }\n    }\n\n    accelerateShotVelocity() {\n        if (this.isDestroyed) return;\n        this.isAcceleratingShot = true;\n    }\n\n    stopAccelarateShotVelocity() {\n        if (this.isDestroyed) return;\n        this.isAcceleratingShot = false;\n    }\n\n    setTargetTurretAngle(inputPosition) {\n        const tankWorldPosition = new THREE.Vector3();\n        this.mesh.getWorldPosition(tankWorldPosition);\n        \n        // Отримуємо кватерніон обертання танка\n        const tankQuaternion = this.mesh.quaternion;\n    \n        // Створюємо вектор від танка до позиції миші\n        const toMouse = new THREE.Vector3().subVectors(inputPosition, tankWorldPosition);\n        toMouse.y = 0;\n    \n        // Створюємо вектор \"вперед\" для танка\n        const tankForward = new THREE.Vector3(0, 0, -1).applyQuaternion(tankQuaternion);\n        tankForward.y = 0;\n        tankForward.normalize();\n    \n        // Обчислюємо кут між вектором \"вперед\" танка та вектором до миші\n        const angle = Math.atan2(\n            tankForward.x * toMouse.z - tankForward.z * toMouse.x,\n            tankForward.x * toMouse.x + tankForward.z * toMouse.z\n        );\n        \n    \n        this.targetTurretAngle = -angle; // Змінюємо знак кута   \n    }\n\n    setTargetAngles(inputPosition) {\n        this.setTargetTurretAngle(inputPosition);\n        if (this.isChangingMode) return; // обмежуємо руши дулом в момент переключення режимів стрільби\n        //const distance = toMouse.length();\n        this.targetBarrelAngle = this.barrelMinAngle;\n        if (this.isIndirectFireMode) {\n            // Обчислюємо відстань до цілі\n            // Встановлюємо кут нахилу дула залежно від відстані\n            this.targetBarrelAngle = this.barrelMinAngle;\n        } else {\n            this.targetBarrelAngle = this.barrelMaxAngle;\n        }\n    }\n\n    setBarrelTargetAngle(angle) {\n        if (this.isChangingMode) return;\n        this.targetBarrelAngle = angle;\n    }\n\n    getBarrelEndPosition(out) {\n        // Отримуємо світову матрицю дула\n        const barrelMatrix = new THREE.Matrix4();\n        this.barrelPivot.updateMatrixWorld();\n        barrelMatrix.copy(this.barrelPivot.matrixWorld);\n    \n        // Встановлюємо кінцеву точку дула\n        out.set(0, 0, -1.5 * this.scale);\n        out.applyMatrix4(barrelMatrix);\n    }\n    \n    getShootDirection(out) {\n        // Отримуємо напрямок пострілу\n        out.set(0, 0, -1);\n        out.applyQuaternion(this.mesh.quaternion);\n        out.applyQuaternion(this.turret.quaternion);\n        out.applyAxisAngle(new THREE.Vector3(1, 0, 0), this.barrelAngle);\n        out.normalize();\n    }\n\n    isPointInsideTank(point) {\n        const halfExtents = this.body.shapes[0].halfExtents;\n        const localPoint = this.body.pointToLocalFrame(point);\n        return (\n            Math.abs(localPoint.x) <= halfExtents.x &&\n            Math.abs(localPoint.y) <= halfExtents.y &&\n            Math.abs(localPoint.z) <= halfExtents.z\n        );\n    }\n\n    remove() {\n        this.isDestroyed = true;\n        this.isAcceleratingShot = false;\n        this.mesh.visible = false;\n        this.body.collisionResponse = false;\n        this.world.removeBody(this.body);\n    }\n\n    getBarrelTipPosition() {\n        // Створюємо матрицю трансформації для всього танка\n        const tankMatrix = new THREE.Matrix4().makeRotationFromQuaternion(this.mesh.quaternion);\n        tankMatrix.setPosition(this.mesh.position);\n    \n        // Створюємо матрицю трансформації для башти\n        const turretMatrix = new THREE.Matrix4().makeRotationY(this.turretRotation);\n        turretMatrix.setPosition(new THREE.Vector3(0, 0.4 * this.scale, 0)); // Додаємо висоту башти\n    \n        // Створюємо матрицю трансформації для дула\n        const barrelMatrix = new THREE.Matrix4().makeRotationX(this.barrelAngle);\n        barrelMatrix.setPosition(new THREE.Vector3(0, 0.15 * this.scale, 0));\n    \n        // Комбінуємо всі трансформації\n        const finalMatrix = new THREE.Matrix4().multiplyMatrices(tankMatrix, turretMatrix);\n        finalMatrix.multiply(barrelMatrix);\n    \n        // Отримуємо кінцеву позицію дула\n        const barrelEnd = new THREE.Vector3(0, 0, -1.5 * this.scale);\n        barrelEnd.applyMatrix4(finalMatrix);\n        \n        return barrelEnd;\n    }\n\n    hackShoot(velocity) {\n        this.shotVelocity = velocity;\n        this.shoot();\n    }\n\n    calculateVelocity(targetPosition) {\n        const gravity = 9.82;\n        const elevationAngle = this.barrelAngle;\n        const startPosition = this.getBarrelTipPosition();\n        \n        const dx = targetPosition.x - startPosition.x;\n        const dz = targetPosition.z - startPosition.z;\n        const distance = Math.sqrt(dx * dx + dz * dz);\n        \n        const height = targetPosition.y - startPosition.y;\n        \n        let v;\n        \n        if (height >= 0) {\n            // Ціль вище або на тій же висоті\n            v = Math.sqrt(\n                (gravity * distance * distance) /\n                (2 * (height + distance * Math.tan(elevationAngle)) * Math.cos(elevationAngle) * Math.cos(elevationAngle))\n            );\n        } else {\n            // Ціль нижче\n            v = Math.sqrt(\n                (gravity * distance * distance) /\n                (2 * Math.cos(elevationAngle) * Math.cos(elevationAngle) * (distance * Math.tan(elevationAngle) - height))\n            );\n        }\n        \n        // Перевіряємо, чи не отримали ми NaN або Infinity\n        if (isNaN(v) || !isFinite(v)) {\n            // Якщо так, використовуємо просту формулу для прямого пострілу\n            v = Math.sqrt(2 * gravity * Math.abs(height) + distance * distance / (2 * Math.cos(elevationAngle) * Math.cos(elevationAngle)));\n        }\n        \n        // Обмежуємо швидкість\n        return Math.max(Math.min(v, this.maxShotVelocity));\n    }\n\n    calculateTrajectory(targetPos, velocity, hitOnly = true) {\n        const gravity = 9.82;\n        const startPos = this.getBarrelTipPosition();\n        const radianAngle = this.barrelAngle;\n        const g = Math.abs(gravity);\n\n        const dx = targetPos.x - startPos.x;\n        const dz = targetPos.z - startPos.z;\n        const groundDistance = Math.sqrt(dx * dx + dz * dz);\n        // Розрахунок часу польоту\n        const t = groundDistance / (velocity * Math.cos(radianAngle));\n    \n        // Розрахунок висоти в кінцевій точці\n        const y = startPos.y + velocity * t * Math.sin(radianAngle) - 0.5 * g * t * t;\n        \n        // Перевірка, чи досягає снаряд цілі\n        if (hitOnly && Math.abs(y - targetPos.y) > 0.5) {\n            return null; // Траєкторія не досягає цілі\n        }\n\n        const points = [];\n        const steps = 100;\n        const timeStep = t / steps;\n\n        for (let i = 0; i <= steps; i++) {\n            const currentTime = i * timeStep;\n            const x = startPos.x + (dx / groundDistance) * velocity * Math.cos(radianAngle) * currentTime;\n            const z = startPos.z + (dz / groundDistance) * velocity * Math.cos(radianAngle) * currentTime;\n            const y = startPos.y + velocity * Math.sin(radianAngle) * currentTime - 0.5 * g * currentTime * currentTime;\n            if (y < targetPos.y) break;\n            points.push(new THREE.Vector3(x, y, z));\n        }\n        return points;\n    }\n\n    shoot() {\n        if (this.isDestroyed) return;\n        \n        // Створюємо матрицю трансформації для всього танка\n        const tankMatrix = new THREE.Matrix4().makeRotationFromQuaternion(this.mesh.quaternion);\n        tankMatrix.setPosition(this.mesh.position);\n    \n        // Створюємо матрицю трансформації для башти\n        const turretMatrix = new THREE.Matrix4().makeRotationY(this.turretRotation);\n        turretMatrix.setPosition(new THREE.Vector3(0, 0.4 * this.scale, 0)); // Додаємо висоту башти\n    \n        // Створюємо матрицю трансформації для дула\n        const barrelMatrix = new THREE.Matrix4().makeRotationX(this.barrelAngle);\n        barrelMatrix.setPosition(new THREE.Vector3(0, 0.15 * this.scale, 0));\n    \n        // Комбінуємо всі трансформації\n        const finalMatrix = new THREE.Matrix4().multiplyMatrices(tankMatrix, turretMatrix);\n        finalMatrix.multiply(barrelMatrix);\n    \n        // Отримуємо кінцеву позицію дула\n        const barrelEnd = new THREE.Vector3(0, 0, -1.5 * this.scale);\n        barrelEnd.applyMatrix4(finalMatrix);\n    \n        // Отримуємо напрямок пострілу\n        const shootDirection = new THREE.Vector3(0, 0, -1);\n        shootDirection.applyMatrix4(finalMatrix);\n        const v = new THREE.Vector3(0, 0, 0);\n        shootDirection.sub(v.setFromMatrixPosition(finalMatrix)).normalize();\n    \n        const initialVelocity = this.shotVelocity;\n        this.shotVelocity = this.minShotVelocity;\n        this.addProjectile(barrelEnd, shootDirection, initialVelocity);\n        this.shootSignal(barrelEnd, shootDirection, initialVelocity);\n    }\n\n    addProjectile(barrelEnd, shootDirection, initialVelocity) {\n        const projectile = new Projectile(\n            this.scene,\n            this.world,\n            barrelEnd,\n            shootDirection,\n            initialVelocity,\n            initialVelocity / this.maxShotVelocity,\n            this.game,\n            this\n        );\n        this.game.addProjectile(projectile);\n        this.isAcceleratingShot = false;\n    }\n\n    shootSignal(barrelEnd, shootDirection, initialVelocity) {\n        if (this.game.onAction) {\n            this.game.onAction({gameId: this.game.id}, {type: \"tank_shoot\", data: {barrelEnd, shootDirection, initialVelocity, id: this.id}});\n        }\n    }\n\n    reset(position, rotation) {\n        this.mesh.position.copy(position);\n        this.body.position.copy(position);\n        this.mesh.rotation.y = rotation;\n        this.rotation = rotation;\n        this.body.quaternion.setFromEuler(0, rotation, 0);\n        this.body.velocity.set(0, 0, 0);\n        this.body.angularVelocity.set(0, 0, 0);\n        this.mesh.quaternion.set(0, 0, 0, 1);\n        this.resetAttributes();\n    }\n\n    resetAttributes() {\n        this.health = this.maxHealth;\n        this.isDestroyed = false;\n        this.isAcceleratingShot = false;\n        this.mesh.visible = true;\n        this.body.collisionResponse = true;\n        this.shotVelocity = this.minShotVelocity;\n        this.isIndirectFireMode = false;\n        this.setOriginalBodyState();\n        this.world.addBody(this.body);\n    }\n}","\nimport * as THREE from 'three';\n\nexport default class SkyBox {\n    constructor(scene) {\n        this.scene = scene;\n        this.createSkyBox();\n    }\n\n    createSkyBox() {\n        const vertexShader = `\n            varying vec3 vWorldPosition;\n            void main() {\n                vec4 worldPosition = modelMatrix * vec4( position, 1.0 );\n                vWorldPosition = worldPosition.xyz;\n                gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n            }\n        `;\n\n        const fragmentShader = `\n            uniform vec3 topColor;\n            uniform vec3 bottomColor;\n            uniform float offset;\n            uniform float exponent;\n            varying vec3 vWorldPosition;\n            void main() {\n                float h = normalize( vWorldPosition + offset ).y;\n                gl_FragColor = vec4( mix( bottomColor, topColor, max( pow( max( h, 0.0 ), exponent ), 0.0 ) ), 1.0 );\n            }\n        `;\n\n        const uniforms = {\n            topColor: { value: new THREE.Color(0x0077ff) },\n            bottomColor: { value: new THREE.Color(0xe4f1ff) },\n            offset: { value: 33 },\n            exponent: { value: 0.6 }\n        };\n\n        const skyGeo = new THREE.SphereGeometry(400, 32, 15);\n        const skyMat = new THREE.ShaderMaterial({\n            uniforms: uniforms,\n            vertexShader: vertexShader,\n            fragmentShader: fragmentShader,\n            side: THREE.BackSide\n        });\n\n        this.sky = new THREE.Mesh(skyGeo, skyMat);\n        this.scene.add(this.sky);\n    }\n}\n","// binary_heap.js\n\nexport class BinaryHeap {\n    constructor(scoreFunction) {\n        this.content = [];\n        this.scoreFunction = scoreFunction;\n    }\n\n    push(element) {\n        // Додаємо елемент в кінець масиву\n        this.content.push(element);\n        // Дозволяємо йому спливти вгору\n        this.bubbleUp(this.content.length - 1);\n    }\n\n    pop() {\n        // Зберігаємо перший елемент, щоб повернути його пізніше\n        const result = this.content[0];\n        // Отримуємо останній елемент і видаляємо його з купи\n        const end = this.content.pop();\n        // Якщо в купі ще є елементи, помістіть останній елемент на початок\n        // і дозволимо йому просочитися вниз\n        if (this.content.length > 0) {\n            this.content[0] = end;\n            this.sinkDown(0);\n        }\n        return result;\n    }\n\n    remove(node) {\n        const length = this.content.length;\n        // Щоб видалити значення, нам потрібно його знайти\n        for (let i = 0; i < length; i++) {\n            if (this.content[i] !== node) continue;\n            // Коли знайдено, замінимо його останнім елементом купи\n            const end = this.content.pop();\n            // Якщо елемент був останнім, ми закінчили\n            if (i === length - 1) break;\n            // Інакше, замінимо його останнім елементом і дозволимо йому просочитися вниз\n            this.content[i] = end;\n            this.bubbleUp(i);\n            this.sinkDown(i);\n            break;\n        }\n    }\n\n    size() {\n        return this.content.length;\n    }\n\n    isEmpty() {\n        return this.content.length === 0;\n    }\n\n    bubbleUp(n) {\n        // Отримуємо елемент, який потрібно перемістити вгору\n        const element = this.content[n];\n        const score = this.scoreFunction(element);\n        // Продовжуємо рухатися вгору, поки не досягнемо кореня або не знайдемо елемент з меншим або рівним значенням\n        while (n > 0) {\n            // Обчислюємо індекс батьківського елемента\n            const parentN = Math.floor((n + 1) / 2) - 1;\n            const parent = this.content[parentN];\n            // Якщо значення батьківського елемента менше або рівне нашому, ми закінчили\n            if (score >= this.scoreFunction(parent)) break;\n\n            // В іншому випадку, міняємо батьківський елемент з поточним і продовжуємо\n            this.content[parentN] = element;\n            this.content[n] = parent;\n            n = parentN;\n        }\n    }\n\n    sinkDown(n) {\n        // Шукаємо місце для елемента\n        const length = this.content.length;\n        const element = this.content[n];\n        const elemScore = this.scoreFunction(element);\n\n        while (true) {\n            // Обчислюємо індекси дочірніх елементів\n            const child2N = (n + 1) * 2;\n            const child1N = child2N - 1;\n            // Це використовується для зберігання позиції, якщо ми знайдемо елемент для заміни\n            let swap = null;\n            let child1Score;\n            // Якщо перший дочірній елемент існує (знаходиться в межах купи)\n            if (child1N < length) {\n                // Шукаємо перший дочірній елемент\n                const child1 = this.content[child1N];\n                child1Score = this.scoreFunction(child1);\n                // Якщо значення менше за поточний елемент, нам потрібно поміняти їх місцями\n                if (child1Score < elemScore) swap = child1N;\n            }\n            // Те саме для другого дочірнього елемента\n            if (child2N < length) {\n                const child2 = this.content[child2N];\n                const child2Score = this.scoreFunction(child2);\n                if (child2Score < (swap === null ? elemScore : child1Score)) swap = child2N;\n            }\n\n            // Якщо жоден з дочірніх елементів не має меншого значення, ми закінчили\n            if (swap === null) break;\n\n            // В іншому випадку, міняємо місцями з дочірнім елементом з меншим значенням і продовжуємо\n            this.content[n] = this.content[swap];\n            this.content[swap] = element;\n            n = swap;\n        }\n    }\n}","// ai_player.js\nimport * as THREE from 'three';\nimport * as CANNON from 'cannon';\nimport { BinaryHeap } from './utils/binary_heap.js';\n\nclass Node {\n    constructor(position, g = 0, h = 0) {\n        this.position = position;\n        this.g = g; // Вартість від початку до цього вузла\n        this.h = h; // Евристична оцінка від цього вузла до цілі\n        this.f = g + h; // Загальна оцінка\n        this.parent = null;\n    }\n\n    // Метод для створення унікального ключа для позиції\n    getPositionKey() {\n        return `${this.position.x},${this.position.y}`;\n    }\n}\n\n\nexport default class AIPlayer {\n    constructor(game, tank) {\n        this.game = game;\n        this.tank = tank;\n        this.target = null;\n        this.state = 'search'; // 'search', 'attack', 'idle'\n        this.lastFireTime = 0;\n        this.lastIndirectFireTime = 0;\n        this.fireCooldown = 2; // секунди між прямими пострілами\n        this.indirectFireCooldown = 10; // секунди між непрямими пострілами\n        this.directFireAccuracy = 0.4;\n        this.indirectFireAccuracy = 0.3;\n        this.currentPath = [];\n        this.currentTargetAngle = null;\n        this.debugPath = null;\n        this.nextPoint = null;\n        this.obstacleGrid = this.createObstacleGrid();\n        this.lastPathfindingPosition = null;\n        this.pathfindingThreshold = 1;\n        this.lastNoPathDeadline = null;\n        this.noPathCooldown = 1;\n        this.isShooting = false;\n        this.tank.deceleration = 3000; // units per second^2\n        this.tank.turnDeceleration = 60;\n        this.tank.acceleration = 60;\n        // this.createDebugGrid();\n    }\n\n    createDebugGrid() {\n        if (this.game.headless) return;\n        if (this.debugGrid) {\n            this.game.scene.remove(this.debugGrid);\n        }\n        if (this.obstacleMarkers) {\n            this.obstacleMarkers.forEach(marker => this.game.scene.remove(marker));\n        }\n    \n        const gridSize = 1; // Розмір клітинки сітки\n        const mapSize = this.game.battleMap.size;\n        const geometry = new THREE.BufferGeometry();\n        const material = new THREE.LineBasicMaterial({ color: 0xFFFFFF, transparent: true, opacity: 0.3 });\n    \n        const points = [];\n        for (let x = -mapSize / 2; x <= mapSize / 2; x += gridSize) {\n            points.push(new THREE.Vector3(x, 0.1, -mapSize / 2));\n            points.push(new THREE.Vector3(x, 0.1, mapSize / 2));\n        }\n        for (let z = -mapSize / 2; z <= mapSize / 2; z += gridSize) {\n            points.push(new THREE.Vector3(-mapSize / 2, 0.1, z));\n            points.push(new THREE.Vector3(mapSize / 2, 0.1, z));\n        }\n    \n        geometry.setFromPoints(points);\n        this.debugGrid = new THREE.LineSegments(geometry, material);\n        this.game.scene.add(this.debugGrid);\n    \n        // Додаємо відображення перешкод\n        this.obstacleMarkers = [];\n        const obstacleMaterial = new THREE.MeshBasicMaterial({ color: 0xFF0000, transparent: true, opacity: 0.5 });\n    \n        for (let x = 0; x < this.obstacleGrid.length; x++) {\n            for (let z = 0; z < this.obstacleGrid[0].length; z++) {\n                if (this.obstacleGrid[x][z]) {\n                    const obstacleGeometry = new THREE.PlaneGeometry(gridSize, gridSize);\n                    const obstacleMesh = new THREE.Mesh(obstacleGeometry, obstacleMaterial);\n                    obstacleMesh.rotation.x = -Math.PI / 2; // Повертаємо, щоб площина була горизонтальною\n                    obstacleMesh.position.set(\n                        x * gridSize - mapSize / 2 + gridSize / 2,\n                        0.11, // Трохи вище сітки\n                        z * gridSize - mapSize / 2 + gridSize / 2\n                    );\n                    this.game.scene.add(obstacleMesh);\n                    this.obstacleMarkers.push(obstacleMesh);\n                }\n            }\n        }\n    }\n\n    update(deltaTime) {\n        if (this.tank.isDestroyed) {\n            this.state = 'idle';\n            this.isShooting = false;\n            return;\n        }\n\n        this.updateState();\n        \n        switch (this.state) {\n            case 'search':\n                this.search(deltaTime);\n                // if (this.currentPath) {\n                //     this.visualizePath(this.currentPath);\n                // }\n                break;\n            case 'siege':\n                this.siege(deltaTime);\n                // if (this.currentPath) {\n                //     this.visualizePath(this.currentPath);\n                // }\n                break;\n            case 'attack':\n                this.attack(deltaTime);\n                break;\n            case 'idle':\n                // Нічого не робимо в режимі очікування\n                break;\n        }\n    }\n\n    updateState() {\n        const opponents = this.game.tanks.filter(tank => tank !== this.tank && !tank.isDestroyed);\n        \n        if (opponents.length === 0) {\n            this.state = 'idle';\n            return;\n        }\n        const newTarget = this.findNearestOpponent(opponents);\n        \n        // Перевіряємо, чи змінилася ціль\n        if (newTarget !== this.target) {\n            this.target = newTarget;\n            this.recalculatePath();\n            this.isShooting = false;\n        } else if (this.target) {\n            // Перевіряємо, чи ціль перемістилася достатньо далеко\n            this.checkTargetMovement();\n        }\n        if (this.isShooting) return;\n        const distanceToTarget = this.distanceToTarget();\n    \n        if (distanceToTarget <= 30 && this.hasLineOfSight()) {\n            this.state = 'attack';\n        } else {\n            const currentTime = this.game.clock.getElapsedTime();\n            // todo: more smart siege switch mode decision making\n            if (currentTime - this.lastIndirectFireTime < this.indirectFireCooldown) {\n                this.state = 'search';\n            } else {\n                this.state = 'siege';\n            }\n            \n        }\n    }\n\n    recalculatePath() {\n        const tankPosition = new THREE.Vector2(this.tank.mesh.position.x, this.tank.mesh.position.z);\n        const targetPosition = new THREE.Vector2(this.target.mesh.position.x, this.target.mesh.position.z);\n        \n        this.currentPath = this.findPath(tankPosition, targetPosition);\n        this.lastPathfindingPosition = targetPosition.clone();\n        // if (this.currentPath) {\n        //     this.visualizePath(this.currentPath);\n        // }\n    }\n\n    checkTargetMovement() {\n        if (!this.lastPathfindingPosition) {\n            this.recalculatePath();\n            return;\n        }\n    \n        const currentTargetPosition = new THREE.Vector2(this.target.mesh.position.x, this.target.mesh.position.z);\n        const distance = this.lastPathfindingPosition.distanceTo(currentTargetPosition);\n    \n        if (distance >= this.pathfindingThreshold) {\n            this.recalculatePath();\n        }\n    }\n\n    hasLineOfSight() {\n        const from = this.tank.body.position;\n        const to = this.target.body.position;\n    \n        // Створюємо вектор напрямку\n        const direction = to.vsub(from);\n        const distance = direction.length();\n        direction.normalize();\n    \n        // Створюємо RaycastResult для зберігання результату\n        const result = new CANNON.RaycastResult();\n    \n        // Створюємо Ray\n        const ray = new CANNON.Ray(from, to);\n        // Масив тіл для перевірки (всі ящики на карті)\n        const bodies = this.game.battleMap.crates.map(crate => crate.body);\n    \n        // Виконуємо перевірку перетину\n        ray.intersectBodies(bodies, result);\n        //this.visualizeRay(from, to, !result.hasHit || result.distance > distance);\n        // Якщо відстань до перешкоди менша, ніж відстань до цілі, то лінії прямої видимості немає\n        return !result.hasHit || result.distance > distance;\n    }\n\n    visualizeRay(from, to, hasLineOfSight) {\n        // Видаляємо попередню лінію, якщо вона існує\n        if (this.debugLine) {\n            this.game.scene.remove(this.debugLine);\n        }\n\n        const material = new THREE.LineBasicMaterial({\n            color: hasLineOfSight ? 0x00ff00 : 0xff0000\n        });\n    \n        const points = [];\n        points.push(new THREE.Vector3(from.x, from.y, from.z));\n        points.push(new THREE.Vector3(to.x, to.y, to.z));\n    \n        const geometry = new THREE.BufferGeometry().setFromPoints(points);\n        this.debugLine = new THREE.Line(geometry, material);\n        this.game.scene.add(this.debugLine);\n    }\n    \n    search(deltaTime) {\n        this.moveTowardsTarget();\n    }\n\n    siege(deltaTime) {\n        this.stopTank();\n        this.tryIndirectFire(deltaTime);\n    }\n\n    attack(deltaTime) {\n        this.stopTank();\n        //this.moveTowardsTarget();\n        this.tryDirectFire(deltaTime);\n    }\n\n    stopTank() {\n        this.tank.move(0);\n        this.tank.rotate(0);\n    }\n\n    updatePathVisualization() {\n        if (this.currentPath && this.currentPath.length > 0) {\n            const remainingPath = this.currentPath.slice();\n            remainingPath.unshift(new THREE.Vector2(\n                Math.floor((this.tank.mesh.position.x + this.game.battleMap.size / 2) / 2),\n                Math.floor((this.tank.mesh.position.z + this.game.battleMap.size / 2) / 2)\n            ));\n            this.visualizePath(remainingPath);\n        }\n    }\n\n    findPath(start, end) {\n        const gridSize = 1;\n        const openSet = new BinaryHeap(node => node.f);\n        const closedSet = new Set();\n        const startNode = new Node(new THREE.Vector2(Math.round(start.x / gridSize) * gridSize, Math.round(start.y / gridSize) * gridSize));\n        const endNode = new Node(this.findNearestFreeNode(new THREE.Vector2(Math.round(end.x / gridSize) * gridSize, Math.round(end.y / gridSize) * gridSize)));\n\n        startNode.g = 0;\n        startNode.h = this.manhattanDistance(startNode.position, endNode.position);\n        startNode.f = startNode.h;\n    \n        openSet.push(startNode);\n    \n        let iterations = 0;\n        const maxIterations = 1000; // Максимальна кількість ітерацій\n        const maxSearchRadius = Infinity; // this.game.battleMap.size; // Максимальний радіус пошуку\n    \n        while (!openSet.isEmpty() && iterations < maxIterations) {\n            iterations++;\n    \n            const currentNode = openSet.pop();\n\n            // Перевірка, чи досягнуто цільового вузла\n            if (currentNode.position.distanceTo(endNode.position) < gridSize) {\n                let path = [];\n                let current = currentNode;\n                while (current != null) {\n                    path.unshift(current.position);\n                    current = current.parent;\n                }\n                return path;\n            }\n    \n            closedSet.add(currentNode.getPositionKey());\n    \n            // Перевірка, чи не виходимо за межі максимального радіусу пошуку\n            if (currentNode.position.distanceTo(startNode.position) > maxSearchRadius) {\n                return null;\n            }\n    \n            const neighbors = this.getNeighbors(currentNode, gridSize);\n    \n            for (let neighbor of neighbors) {\n                if (closedSet.has(neighbor.getPositionKey())) continue;\n    \n                const tentativeGScore = currentNode.g + currentNode.position.distanceTo(neighbor.position);\n    \n                if (!openSet.content.some(node => node.position.equals(neighbor.position)) || tentativeGScore < neighbor.g) {\n                    neighbor.parent = currentNode;\n                    neighbor.g = tentativeGScore;\n                    neighbor.h = this.manhattanDistance(neighbor.position, endNode.position);\n                    neighbor.f = neighbor.g + neighbor.h;\n    \n                    if (!openSet.content.some(node => node.position.equals(neighbor.position))) {\n                        openSet.push(neighbor);\n                    }\n                }\n            }\n        }\n    \n        // Якщо досягнуто ліміту ітерацій, повертаємо null або частковий шлях\n        if (iterations >= maxIterations) {\n            console.log(\"Досягнуто максимальної кількості ітерацій при пошуку шляху\");\n            return null;\n        }\n    \n        // Шлях не знайдено\n        return null;\n    }\n    \n    manhattanDistance(a, b) {\n        return Math.abs(a.x - b.x) + Math.abs(a.y - b.y);\n    }\n\n\n    getNeighbors(node, gridSize) {\n        const neighbors = [];\n        const directions = [\n            new THREE.Vector2(1, 0), new THREE.Vector2(-1, 0),\n            new THREE.Vector2(0, 1), new THREE.Vector2(0, -1),\n            new THREE.Vector2(1, 1), new THREE.Vector2(1, -1),\n            new THREE.Vector2(-1, 1), new THREE.Vector2(-1, -1)\n        ];\n\n        for (let dir of directions) {\n            const neighborPos = new THREE.Vector2(\n                node.position.x + dir.x * gridSize,\n                node.position.y + dir.y * gridSize\n            );\n\n            if (this.isWalkable(neighborPos)) {\n                neighbors.push(new Node(neighborPos));\n            }\n        }\n\n        return neighbors;\n    }\n\n    isWalkable(position) {\n        const gridSize = 1;\n        const mapSize = this.game.battleMap.size;\n        const x = Math.floor((position.x + mapSize / 2) / gridSize);\n        const y = Math.floor((position.y + mapSize / 2) / gridSize);\n    \n        if (x < 0 || x >= this.obstacleGrid.length || y < 0 || y >= this.obstacleGrid[0].length) {\n            return false;\n        }\n    \n        return !this.obstacleGrid[x][y];\n    }\n\n    createObstacleGrid() {\n        const gridSize = 1;\n        const mapSize = this.game.battleMap.size;\n        const gridDimension = Math.ceil(mapSize / gridSize);\n        const grid = new Array(gridDimension).fill(null).map(() => new Array(gridDimension).fill(false));\n    \n        this.game.battleMap.crates.forEach(crate => {\n            const minX = Math.floor((crate.position.x - (crate.size*1.3) / 2 + mapSize / 2) / gridSize);\n            const maxX = Math.ceil((crate.position.x + (crate.size*1.3) / 2 + mapSize / 2) / gridSize);\n            const minY = Math.floor((crate.position.z - (crate.size*1.3) / 2 + mapSize / 2) / gridSize);\n            const maxY = Math.ceil((crate.position.z + (crate.size*1.3) / 2 + mapSize / 2) / gridSize);\n            for (let x = minX; x < maxX; x++) {\n                for (let y = minY; y < maxY; y++) {\n                    if (x >= 0 && x < gridDimension && y >= 0 && y < gridDimension) {\n                        grid[x][y] = true;\n                    }\n                }\n            }\n        });\n        \n        return grid;\n    }\n\n    moveTowardsTarget() {\n        if (!this.target) return;\n        if (!this.ensureDirectMode()) return;\n        const tankPosition = new THREE.Vector2(this.tank.mesh.position.x, this.tank.mesh.position.z);\n        \n        // Якщо шлях ще не знайдено або ми досягли кінця поточного шляху, знаходимо новий шлях\n        if (!this.currentPath || this.currentPath.length === 0) {\n            const currentTime = this.game.clock.getElapsedTime();\n            if (currentTime - this.lastNoPathDeadline < this.noPathCooldown) return;\n            this.recalculatePath();\n            this.lastNoPathDeadline = currentTime;\n            if (!this.currentPath) {\n                console.log(\"Не вдалося знайти шлях до цілі\");\n                return;\n            }\n        }\n        // Отримуємо наступну точку шляху\n        let nextPoint = this.currentPath[0];\n        const distanceToNextPoint = tankPosition.distanceTo(nextPoint);\n    \n        // Якщо ми досягли поточної точки, переходимо до наступної\n        if (distanceToNextPoint < 1) {\n            this.currentPath.shift();\n            if (this.currentPath.length > 0) {\n                nextPoint = this.currentPath[0];\n            } else {\n                // Шлях закінчився, зупиняємося\n                this.tank.move(0);\n                return;\n            }\n        }\n\n        if (!this.currentTargetAngle) {\n            this.currentTargetAngle = getYRotationAngle(this.tank.mesh.position, new THREE.Vector3(nextPoint.x, 0, nextPoint.y));\n        }\n\n        // Повертаємо танк до цілі\n        const angleDiff = getDeltaAngle(this.tank.mesh.rotation.y, this.currentTargetAngle);\n        if (Math.abs(angleDiff) > 0.05) {\n            this.tank.rotate(-Math.sign(angleDiff));\n            this.tank.move(0);\n        } else {\n            this.tank.rotate(0);\n            this.currentTargetAngle = null;\n            \n            // Якщо танк спрямований правильно, рухаємося вперед\n            this.tank.move(1);\n        }\n        this.nextPoint = nextPoint;\n    }\n    \n\n    visualizePath(path) {\n        if (this.pathLine) {\n            this.game.scene.remove(this.pathLine);\n        }\n    \n        const geometry = new THREE.BufferGeometry().setFromPoints(\n            path.map(p => new THREE.Vector3(p.x, 0.2, p.y))\n        );\n        const material = new THREE.LineBasicMaterial({ color: 0x00FF00 });\n        this.pathLine = new THREE.Line(geometry, material);\n        this.game.scene.add(this.pathLine);\n    }\n\n    onDebug(callback) {\n        this.callback = callback;\n    }\n\n\n    aimAtTarget(deltaTime) {\n        if (!this.target) return false;\n        if (this.tank.isTransitioning) return false;\n        const toTarget = new THREE.Vector3().subVectors(this.target.mesh.position, this.tank.mesh.position);\n        const targetAngle = Math.atan2(toTarget.x, toTarget.z);\n        \n        const tankBodyAngle = this.tank.mesh.rotation.y;\n        \n        // Обчислюємо необхідний кут повороту башти відносно корпусу танка\n        \n        const randomError = (Math.random() - 0.5) * 0.04; // Випадкова похибка ±2%\n        let turretAngle = (targetAngle - tankBodyAngle - Math.PI)+randomError*4;\n        // Нормалізуємо кут до діапазону [-PI, PI]\n        while (turretAngle > Math.PI) turretAngle -= 2 * Math.PI;\n        while (turretAngle < -Math.PI) turretAngle += 2 * Math.PI;\n        // Встановлюємо цільовий кут повороту башти\n        this.tank.targetTurretAngle = turretAngle;\n        \n    \n        // Решта коду залишається без змін\n        const distance = toTarget.length();\n        let elevationAngle = Math.atan2(toTarget.y, Math.sqrt(toTarget.x * toTarget.x + toTarget.z * toTarget.z));\n        \n        elevationAngle = Math.max(this.tank.barrelMinAngle, Math.min(elevationAngle, this.tank.barrelMaxAngle));\n        \n        this.tank.setBarrelTargetAngle(elevationAngle);\n\n        this.aimCalculatedShotVelocity = this.tank.calculateVelocity(this.target.mesh.position);\n        \n        if (this.tank.shotVelocity < this.aimCalculatedShotVelocity) {\n            this.tank.accelerateShotVelocity();\n        } else {\n            this.tank.stopAccelarateShotVelocity();\n        }\n        elevationAngle += randomError;\n        this.callback && this.callback(Math.abs(this.tank.turretRotation - turretAngle) < 0.05,\n            Math.abs(this.tank.barrelAngle - elevationAngle) < 0.05, \n            this.tank.shotVelocity >= this.aimCalculatedShotVelocity, this.tank.turretRotation, turretAngle);\n        // Перевіряємо, чи досягнуто потрібного кута прицілювання\n        return Math.abs(this.tank.turretRotation - turretAngle) < 0.05 && \n            Math.abs(this.tank.barrelAngle - elevationAngle) < 0.05 &&\n            this.tank.shotVelocity >= this.aimCalculatedShotVelocity;\n    }\n\n    ensureIndirectMode() {\n        if (this.tank.isTransitioning) {\n            return false;\n        }\n        if (!this.tank.isIndirectFireMode) {\n            this.tank.startTransition(true); \n            return false};\n        return true;\n    }\n\n    ensureDirectMode() {\n        if (this.tank.isTransitioning) {\n            return false;\n        }\n        if (this.tank.isIndirectFireMode) {\n            this.tank.startTransition(false); \n            return false};\n        return true;\n    }\n\n    tryDirectFire(deltaTime) {\n        this.isShooting = true;\n        const currentTime = this.game.clock.getElapsedTime();\n        if (currentTime - this.lastFireTime < this.fireCooldown) return;\n        if (!this.ensureDirectMode()) {\n            return;\n        }\n        if (this.aimAtTarget(deltaTime)) {\n            this.tank.shoot();\n            this.isShooting = false;\n            this.lastFireTime = currentTime;\n        }\n    }\n\n    tryIndirectFire(deltaTime) {\n        if (!this.ensureIndirectMode()) {\n            return;\n        }\n        const currentTime = this.game.clock.getElapsedTime();\n        this.isShooting = true;\n        if (this.aimAtTarget(deltaTime)) {\n            this.tank.shoot();\n            this.isShooting = false;\n            this.lastIndirectFireTime = currentTime;\n        }\n    }\n\n    findNearestOpponent(opponents) {\n        return opponents.reduce((nearest, current) => {\n            const distToNearest = nearest.mesh.position.distanceTo(this.tank.mesh.position);\n            const distToCurrent = current.mesh.position.distanceTo(this.tank.mesh.position);\n            return distToCurrent < distToNearest ? current : nearest;\n        });\n    }\n\n    distanceToTarget() {\n        if (!this.target) return Infinity;\n        return this.tank.mesh.position.distanceTo(this.target.mesh.position);\n    }\n\n    findNearestFreeNode(position) {\n        const gridSize = 1;\n        const mapSize = this.game.battleMap.size;\n        const startX = Math.floor((position.x + mapSize / 2) / gridSize);\n        const startY = Math.floor((position.y + mapSize / 2) / gridSize);\n    \n        let nearestFreeNode = null;\n        let minDistance = Infinity;\n    \n        // Перевіряємо вузли в радіусі до 5 клітинок\n        for (let dx = -5; dx <= 5; dx++) {\n            for (let dy = -5; dy <= 5; dy++) {\n                const x = startX + dx;\n                const y = startY + dy;\n    \n                if (x >= 0 && x < this.obstacleGrid.length && y >= 0 && y < this.obstacleGrid[0].length) {\n                    if (!this.obstacleGrid[x][y]) {\n                        const nodePosition = new THREE.Vector2(\n                            (x * gridSize + gridSize / 2) - mapSize / 2,\n                            (y * gridSize + gridSize / 2) - mapSize / 2\n                        );\n                        const distance = nodePosition.distanceTo(position);\n    \n                        if (distance < minDistance) {\n                            minDistance = distance;\n                            nearestFreeNode = nodePosition;\n                        }\n                    }\n                }\n            }\n        }\n    \n        return nearestFreeNode || position;\n    }\n}\n\nfunction getYRotationAngle(from, to) {\n    // Створюємо вектор напрямку\n    const direction = new THREE.Vector3().subVectors(from, to);\n    \n    // Проектуємо на площину XZ\n    const directionXZ = new THREE.Vector3(direction.x, 0, direction.z);\n    \n    // Обчислюємо кут за допомогою Math.atan2\n    return Math.atan2(directionXZ.x, directionXZ.z);\n  }\n\nconst getDeltaAngle = function () {\n\nvar TAU = 2 * Math.PI;\nvar mod = function ( a, n ) { return ( a % n + n ) % n; }\n\nreturn function ( current, target ) {\n\nvar a = mod( ( current - target ), TAU );\nvar b = mod( ( target - current ), TAU );\n\n    return a < b ? -a : b;\n\n}\n\n}();","// powerup.js\nimport * as THREE from 'three';\nimport * as CANNON from 'cannon';\nimport { findContact } from '../utils/contact';\n\nexport default class PowerUp {\n    constructor(scene, world, position, game) {\n        this.scene = scene;\n        this.world = world;\n        this.position = position;\n        this.game = game;\n        this.isDestroyed = false;\n\n        this.createMesh();\n        this.createPhysicsBody();\n        this.createGlowEffect();\n        this.startAnimation();\n        this.onCollideListener = null;\n    }\n\n    static getMesh() {\n        // Створюємо \"клітку\" з пунктирних ліній\n        const cageGeometry = new THREE.BoxGeometry(1, 1, 1);\n        const cageEdges = new THREE.EdgesGeometry(cageGeometry);\n        const dashedMaterial = new THREE.LineDashedMaterial({ \n            color: 0xffffff, \n            dashSize: 0.4, \n            gapSize: 0.2,\n            linewidth: 2 // Зробили лінії товщими\n        });\n        const cageMesh = new THREE.LineSegments(cageEdges, dashedMaterial);\n        cageMesh.computeLineDistances(); // Необхідно для пунктирних ліній\n\n        // Створюємо внутрішній символ (за замовчуванням куб)\n        const innerGeometry = new THREE.BoxGeometry(0.5, 0.5, 0.5);\n        const innerMaterial = new THREE.MeshPhongMaterial({ color: 0xffff00 });\n        const innerMesh = new THREE.Mesh(innerGeometry, innerMaterial);\n\n        // Групуємо все разом\n        const mesh = new THREE.Group();\n        mesh.add(cageMesh);\n        mesh.add(innerMesh);\n        return mesh;\n    }\n\n    createMesh() {\n        // Створюємо \"клітку\" з пунктирних ліній\n        const cageGeometry = new THREE.BoxGeometry(1, 1, 1);\n        const cageEdges = new THREE.EdgesGeometry(cageGeometry);\n        this.dashedMaterial = new THREE.LineDashedMaterial({ \n            color: 0xffffff, \n            dashSize: 0.4, \n            gapSize: 0.2,\n            linewidth: 2 // Зробили лінії товщими\n        });\n        this.cageMesh = new THREE.LineSegments(cageEdges, this.dashedMaterial);\n        this.cageMesh.computeLineDistances(); // Необхідно для пунктирних ліній\n\n        // Створюємо внутрішній символ (за замовчуванням куб)\n        const innerGeometry = new THREE.BoxGeometry(0.5, 0.5, 0.5);\n        this.innerMaterial = new THREE.MeshPhongMaterial({ color: 0xffff00 });\n        this.innerMesh = new THREE.Mesh(innerGeometry, this.innerMaterial);\n\n        // Групуємо все разом\n        this.mesh = new THREE.Group();\n        this.mesh.add(this.cageMesh);\n        this.mesh.add(this.innerMesh);\n\n        this.mesh.position.copy(this.position);\n        this.scene.add(this.mesh);\n    }\n\n    createGlowEffect() {\n        const glowColor = new THREE.Color(0xffffff);\n\n        // Створюємо точкове світло\n        this.glowLight = new THREE.PointLight(glowColor, 1, 3);\n        this.glowLight.position.set(0, 0, 0);\n        this.mesh.add(this.glowLight);\n    }\n\n    createPhysicsBody() {\n        const shape = new CANNON.Box(new CANNON.Vec3(0.5, 0.5, 0.5));\n        this.body = new CANNON.Body({\n            mass: 0,\n            shape: shape,\n            collisionFilterGroup: 2,\n            position: new CANNON.Vec3(this.position.x, this.position.y, this.position.z),\n        });\n        this.body.collisionResponse = false;\n        this.world.addBody(this.body);\n    }\n\n    onCollide(event) {\n        if (this.isDestroyed) return;\n\n        const tank = this.game.tanks.find((tank) => tank.body.id == event.body.id);\n        if (!tank) return;\n        this.onCollect(tank);\n    }\n\n    startAnimation() {\n        this.animationTime = 0;\n    }\n\n    update(deltaTime) {\n        this.animationTime += deltaTime;\n\n        // Обертання\n        this.cageMesh.rotation.y = this.animationTime * 0.5;\n        this.innerMesh.rotation.y = this.animationTime * -0.5;\n\n        // Підйом і опускання\n        const yOffset = Math.sin(this.animationTime * 2) * 0.1;\n        this.mesh.position.y = this.position.y + yOffset;\n\n        // Анімація світіння\n        const glowIntensity = 0.5 + Math.sin(this.animationTime * 4) * 0.3;\n        this.glowLight.intensity = glowIntensity;\n        const contact = findContact(this.world.contacts, this.body.id);\n        if (contact) this.onCollide(contact);\n    }\n\n    onCollect(tank) {\n        // Буде перевизначено в дочірніх класах\n        \n    }\n\n    remove() {\n        this.scene.remove(this.mesh);\n        this.isDestroyed = true;\n        this.world.removeBody(this.body);\n    }\n}\n","\n// healpowerup.js\nimport PowerUp from './power_up';\nimport * as THREE from 'three';\n\nexport default class HealPowerUp extends PowerUp {\n    static objectId = 3;\n    constructor(scene, world, position, game) {\n        super(scene, world, position, game);\n    }\n\n    static getMesh() {\n        const mesh = PowerUp.getMesh();\n        const innerMesh = new THREE.Group();\n\n        // Матеріал для хреста\n        const crossMaterial = new THREE.MeshPhongMaterial({ \n            color: 0xff0000,\n            specular: 0x000055,\n            shininess: 30,\n            flatShading: true\n        });\n\n        // Горизонтальна частина хреста\n        const horizontalGeometry = new THREE.BoxGeometry(0.5, 0.1, 0.1);\n        const horizontalMesh = new THREE.Mesh(horizontalGeometry, crossMaterial);\n        innerMesh.add(horizontalMesh);\n\n        // Вертикальна частина хреста\n        const verticalGeometry = new THREE.BoxGeometry(0.1, 0.5, 0.1);\n        const verticalMesh = new THREE.Mesh(verticalGeometry, crossMaterial);\n        innerMesh.add(verticalMesh);\n\n        // Додаємо невеликі кубики на кінцях для округлення\n        const endGeometry = new THREE.BoxGeometry(0.1, 0.1, 0.1);\n        const positions = [\n            [0.25, 0, 0], [-0.25, 0, 0],  // горизонтальні кінці\n            [0, 0.25, 0], [0, -0.25, 0]   // вертикальні кінці\n        ];\n        positions.forEach(pos => {\n            const endMesh = new THREE.Mesh(endGeometry, crossMaterial);\n            endMesh.position.set(...pos);\n            innerMesh.add(endMesh);\n        });\n        mesh.children[0].material.needsUpdate = true;\n        mesh.children[0].material.color.setHex(0xffffff);\n        mesh.remove(mesh.children[1]); // Видаляємо старий innerMesh\n        mesh.add(innerMesh);\n        return mesh;\n    }\n\n    createMesh() {\n        super.createMesh();\n        const cross = this.game.loader.getModel(\"cross\");\n        this.innerMesh = cross;\n        this.innerMesh.children[0].material.color.set(1,0,0)\n        this.innerMesh.scale.set(0.18,0.18,0.18);\n        this.mesh.remove(this.mesh.children[1]); // Видаляємо старий innerMesh\n        this.mesh.add(this.innerMesh);\n        this.dashedMaterial.needsUpdate = true;\n        this.dashedMaterial.color.setHex(0xffffff);\n    }\n\n    onCollect(tank) {\n        tank.heal(50);\n        this.remove();\n    }\n}\n","const TICK_RATE = 30\nlet tickLengthMs = 1000 / TICK_RATE\n\nexport const loop = () => { \n    let id = null; \n    const cycle = (tick) => {\n        id = setTimeout(() => cycle(tick), tickLengthMs);\n        tick()\n        id.ref()\n        return () => clearTimeout(id);\n    }\n    return cycle;\n}\n","// headless_game.js\nimport * as THREE from 'three';\nimport * as CANNON from 'cannon';\nimport BattleMap from './battlemap';\nimport Tank from './objects/tank';\nimport SkyBox from './skybox';\nimport AIPlayer from './ai_player';\nimport HealPowerUp from './objects/heal_power_up';\nimport { loop } from './utils/loop';\n\nexport default class HeadlessGame {\n    constructor(loader, options) {\n        const {map, ai, onUpdate, onAction} = options;\n        this.loader = loader;\n        this.headless = true;\n        this.id = options.gameId;\n        this._tankCounter = 0;\n        this._crateCounter = 0;\n        this.scene = new THREE.Scene();\n        this.world = new CANNON.World();\n        this.world.gravity.set(0, -9.82, 0);\n        this.clock = new THREE.Clock();\n        this.projectiles = [];\n        this.maxProjectiles = 100;\n        this.plane = new THREE.Plane(new THREE.Vector3(0, 1, 0), 0);\n        this.skyBox = new SkyBox(this.scene);\n        const mapSize = 60;\n        this.battleMap = map ? BattleMap.fromMap(this.scene, this, map) : new BattleMap(this.scene, this, mapSize, 7);\n        this.tanks = [\n            new Tank(this.scene, this.world, this, 0xff0000, this.battleMap.spawnPoints[0].position, this.battleMap.spawnPoints[0].rotation),\n            new Tank(this.scene, this.world, this, 0x0000ff, this.battleMap.spawnPoints[1].position, this.battleMap.spawnPoints[1].rotation),\n            new Tank(this.scene, this.world, this, 0x00ff00, this.battleMap.spawnPoints[2].position, this.battleMap.spawnPoints[2].rotation),\n            new Tank(this.scene, this.world, this, 0xffff00, this.battleMap.spawnPoints[3].position, this.battleMap.spawnPoints[3].rotation),\n        ];\n        this.tankSharedData = this.tanks.reduce((acc, tank) => {\n            acc[tank.id] = {\n                id: tank.id,\n                position: null,\n                quaternion: null,\n                angularVelocity: null,\n                velocity: null,\n                targetTurretAngle: null,\n                targetBarrelAngle: null,\n            };\n            return acc;\n        }, {});\n        this.aiPlayers = null;\n        this.initiateAI(ai);\n        this.respawnTimer = 5000; // 5 секунд для CPU танків\n        this.powerUps = [];\n        this.powerUpSpawnInterval = 10000; // 10 секунд\n        this.lastPowerUpSpawnTime = 0;\n        this.setupCollisionEvents();\n        this.explosions = [];\n        this.frags = options.frags || this.tanks.reduce((acc, t) => ({...acc, [t.id]: 0}), {});\n        this.onUpdate = onUpdate;\n        this.onAction = onAction;\n        this.tick = this.tick.bind(this);\n\n\n        if (options.tanks) {\n            Object.entries(options.tanks).forEach(([id, state]) => {\n                const tank = this.tanks.find(tank => tank.id == id);\n                console.log('apply state',id, state, tank.id);\n                tank.applyState(state);\n            })\n        }\n    }\n\n    generateTankId() {\n        return ++this._tankCounter;\n    }\n\n    generateCrateId() {\n        return ++this._crateCounter;\n    }\n\n    initiateAI(ai) {\n        console.log(this.tanks.map(t => t.id), (ai ? ai.map(a => a.tankId) : []));\n        this.aiPlayers = ai ? ai.map((ai) => new AIPlayer(this, this.tanks.find((t) => t.id === ai.tankId)))\n            : [];\n    }\n\n    updateSharedData() {\n        for (let i = this.tanks.length - 1; i >= 0; i--) {\n            const tank = this.tanks[i];\n            const state = tank.getStateData();\n            this.tankSharedData[tank.id].position = state.position\n            this.tankSharedData[tank.id].quaternion = state.quaternion\n            this.tankSharedData[tank.id].angularVelocity = state.angularVelocity\n            this.tankSharedData[tank.id].velocity = state.velocity\n            this.tankSharedData[tank.id].targetTurretAngle = state.targetTurretAngle\n            this.tankSharedData[tank.id].targetBarrelAngle = state.targetBarrelAngle\n            this.tankSharedData[tank.id].isIndirectFireMode = state.isIndirectFireMode\n            this.tankSharedData[tank.id].isAcceleratingShot = state.isAcceleratingShot\n            this.tankSharedData[tank.id].shotVelocity = state.shotVelocity\n            this.tankSharedData[tank.id].isDestroyed = state.isDestroyed;\n        }\n    }\n\n\n    setupCollisionEvents() {\n        this.world.addEventListener('beginContact', (event) => {\n            const bodyA = event.bodyA;\n            const bodyB = event.bodyB;\n\n            // Перевіряємо, чи є одне з тіл паверапом, а інше - танком\n            const powerUp = this.powerUps.find(pu => pu.body === bodyA || pu.body === bodyB);\n            const tank = this.tanks.find(t => t.body === bodyA || t.body === bodyB);\n\n            if (powerUp && tank) {\n                powerUp.onCollect(tank);\n                this.removePowerUp(powerUp);\n            }\n        });\n    }\n\n    removePowerUp(powerUp) {\n        const index = this.powerUps.indexOf(powerUp);\n        if (index > -1) {\n            this.powerUps.splice(index, 1);\n            powerUp.remove();\n        }\n    }\n\n    update() {\n        const deltaTime = this.clock.getDelta();\n\n        this.battleMap.update();\n        this.tanks.forEach(tank => tank.update(deltaTime));\n\n        this.updateProjectiles(deltaTime);\n        this.updateExplosions(deltaTime);\n\n\n        this.updatePowerUps(deltaTime);\n        //this.spawnPowerUps();\n\n        this.aiPlayers.forEach(ai => ai.update(deltaTime));\n        this.updateSharedData();\n        if (this.onUpdate) this.onUpdate({gameId: this.id}, deltaTime);\n        this.world.step(1/60, deltaTime, 3);\n        return deltaTime;\n    }\n\n    loop() {\n        this.update();\n        const cycle = loop();\n        // const looper = globalThis.hasOwnProperty('requestAnimationFrame') ? requestAnimationFrame : loop\n        this.cancelLoop = cycle(this.update.bind(this));\n    }\n\n    tick() {\n        this.update();\n        const id = requestAnimationFrame(this.tick);\n        this.cancelLoop = () => cancelAnimationFrame(id);\n    }\n\n    stop() {\n        if (this.cancelLoop !== undefined) {\n            console.log('Stopping game '+ this.id);\n            this.cancelLoop();\n        }\n    }\n\n    addProjectile(projectile) {\n        this.projectiles.push(projectile);\n        if (this.projectiles.length > this.maxProjectiles) {\n            const oldestProjectile = this.projectiles.shift();\n            oldestProjectile.remove();\n        }\n        projectile.game = this;\n    }\n\n\n    addExplosion(explosion) {\n        this.explosions.push(explosion);\n    }\n\n    updateExplosions(deltaTime) {\n        this.explosions = this.explosions.filter(explosion => explosion.update(deltaTime));\n    }\n\n    checkProjectileCollision(projectile) {\n        if ( projectile.hasContact()) {\n            // Колізія виявлена\n            \n            return true;\n        }\n        \n        return false;\n    }\n\n    updateProjectiles(deltaTime) {\n        for (let i = this.projectiles.length - 1; i >= 0; i--) {\n            const projectile = this.projectiles[i];\n            projectile.update(deltaTime);\n    \n            if (projectile.isDestroyed) {\n                this.projectiles.splice(i, 1);\n                continue\n            }\n            if (this.isOutOfBounds(projectile)) {\n                projectile.remove();\n                this.projectiles.splice(i, 1);\n            }\n        }\n    }\n\n\n    isOutOfBounds(projectile) {\n        const position = projectile.mesh.position;\n        const boundaryLimit = this.battleMap.size * 1;\n        return Math.abs(position.x) > boundaryLimit || \n               Math.abs(position.y) > boundaryLimit || \n               Math.abs(position.z) > boundaryLimit;\n    }\n\n    isPlayerControlledTank(tank) {\n        return !this.aiPlayers.some((ai) => ai.tank.id == tank.id)\n    }\n\n    handleTankDeath(tank) {\n        tank.remove();\n        if (this.isPlayerControlledTank(tank)) { // Якщо це танк гравця\n            this.onTankDeath(tank);\n        } else { // Якщо це CPU танк\n            setTimeout(() => this.respawnTank(tank), this.respawnTimer);\n        }\n    }\n\n    onTankDeath(tank) {}\n\n    respawnTank(tank) {\n        const {optimalPoint, rotation} = this.getOptimalSpawnPoint();\n        if (this.headless && this.onAction) {\n            this.onAction({gameId: this.id}, {type: \"respawn_tank\", data: {id: tank.id, point: optimalPoint, rotation}});\n        }\n        this.respawnTankInPosition(tank, optimalPoint, rotation);\n    }\n\n    respawnTankInPosition(tank, point, rotation) {\n        if (!this.headless) console.log('respawn_tank', tank, point, rotation)\n        tank.reset(point, rotation);\n    }\n\n    getOptimalSpawnPoint() {\n        let optimalPoint = null;\n        let rotation = null;\n        let minEnemies = Infinity;\n\n        for (const spawnPoint of this.battleMap.spawnPoints) {\n            const enemiesNearby = this.countEnemiesNearPoint(spawnPoint.position);\n            if (enemiesNearby < minEnemies) {\n                minEnemies = enemiesNearby;\n                optimalPoint = spawnPoint.position;\n                rotation = spawnPoint.rotation;\n            }\n        }\n\n        return {optimalPoint, rotation};\n    }\n\n    countEnemiesNearPoint(point) {\n        const radius = 20; // Радіус перевірки\n        return this.tanks.filter(tank => \n            !tank.isDestroyed && \n            tank.mesh.position.distanceTo(point) < radius\n        ).length;\n    }\n\n    updatePowerUps(deltaTime) {\n        for (let i = this.powerUps.length - 1; i >= 0; i--) {\n            const powerUp = this.powerUps[i];\n            powerUp.update(deltaTime)\n    \n            if (this.isDestroyed) {\n                this.powerUps.splice(i, 1);\n            }\n        }\n    }\n\n    spawnPowerUps() {\n        const currentTime = Date.now();\n        if (currentTime - this.lastPowerUpSpawnTime > this.powerUpSpawnInterval) {\n            const position = this.getRandomPosition();\n            const healPowerUp = new HealPowerUp(this.scene, this.world, position, this);\n            this.powerUps.push(healPowerUp);\n            this.lastPowerUpSpawnTime = currentTime;\n        }\n    }\n\n    getRandomPosition() {\n        const halfSize = this.battleMap.size / 2;\n        const x = Math.random() * this.battleMap.size - halfSize;\n        const z = Math.random() * this.battleMap.size - halfSize;\n        return new THREE.Vector3(x, 1, z);\n    }\n\n    damageTank(damage, tank, radius, position, dealer) {\n        tank.takeDamage(damage, dealer);\n        const tankKillerId =  this.checkTankDestruction(tank, dealer);\n        if (this.headless && this.onAction) {\n            this.onAction({gameId: this.id}, {type: \"damage_tank\", data: {id: tank.id, radius, damage, dealer: dealer.id, position}});\n        }\n        return tankKillerId;\n    }\n\n    checkTankDestruction(tank, dealer) {\n        if (tank.health <= 0 && !tank.isDestroyed) {\n            tank.isDestroyed = true;\n            console.log(`${dealer.id} killed ${tank.id}`)\n            this.handleTankDeath(tank);\n            return dealer.id;\n        }\n        return null;\n    }\n\n    damageCrate(innerPoint, deepPoint, radius, crate) {\n        const vec = crate.destroyCubesInRadius(deepPoint, radius);\n        if (this.headless && this.onAction) {\n            this.onAction({gameId: this.id}, {type: \"damage_crate\", data: {id: crate.id, innerPoint, deepPoint, radius}});\n        }\n        return vec;\n    }\n\n    addFrag(owner) {\n        this.frags[owner.id] = this.frags[owner.id] ? this.frags[owner.id] + 1 : 1;\n    }\n\n    start() {\n        this.loop();\n    }\n}\n","import * as THREE from 'three';\n\nexport class FakeLoader {\n    constructor() {\n        this.model = new THREE.Object3D()\n        const geometry = new THREE.BoxGeometry(1, 1, 1);\n\n        const material = new THREE.MeshStandardMaterial({ \n            color: new THREE.Color(),\n        });\n        const mesh = new THREE.Mesh(geometry, material)\n        this.model.children.push(mesh);\n\n        this.texture = new THREE.DataTexture( new Uint8Array(), 16, 16 );\n    }\n\n    getModel(id) {\n        return this.model;\n    }\n\n    getTexture(id) {\n        return this.texture;\n    }\n}\n","import  HeadlessGame from \"../game/headless_game\";\nimport { FakeLoader } from \"../game/fake_resource\";\nimport * as THREE from 'three';\n\nconst generateGameId = () => `game-${Math.floor(Math.random() * 100000)}`;\nconst loader = new FakeLoader();\nexport class ProviderController {\n    games = {};\n    playersReady = {};\n    constructor(provider) {\n        this.provider = provider;\n        this.frequency = 1 / 20; // 20 Hz\n        this.timeSinceStateLastProvide = 0;\n    }\n\n    listen() {\n        this.provider.onGameCreate((meta, options) => {\n            this.onGameCreate(meta, options)\n        })\n        this.provider.onReadyToStartGame((meta, options) => {\n            this.onReadyToStartGame(meta, options)\n        })\n        this.provider.onUserTanksUpdate((meta, update) => {\n            this.onUserTanksUpdate(meta, update);\n        })\n        this.provider.onUserTankShoot((meta, data) => {\n            this.onUserTankShoot(meta, data)\n        })\n        this.provider.onUserLeft((meta, data) => {\n            this.onUserLeft(meta, data)\n        })\n        this.provider.onUserTankRespawn((meta, data) => {\n            this.onUserTankRespawn(meta, data);\n        })\n        if (this.provider.listen) {\n            this.provider.listen()\n        }\n    }\n\n    onGameTick(meta, deltaTime) {\n        // this.timeSinceStateLastProvide += deltaTime;\n        // if (this.timeSinceStateLastProvide >= this.frequency) {\n            \n        //     this.timeSinceStateLastProvide = 0;\n        // }\n        this.emitTanksUpdate(meta);\n    }\n\n    onUserLeft(meta, data) {\n        if (!this.games[meta.gameId]) return;\n        console.log('user left', meta, data)\n        this.games[meta.gameId].playersReady[meta.id] = false;\n        if (Object.values(this.games[meta.gameId].playersReady).every((ready) => !ready)) {\n            console.log('stopping game...');\n            this.games[meta.gameId].stop();\n            delete this.games[meta.gameId];\n        }\n    }\n\n    onGameAction(meta, {type, data}) {\n        switch (type) {\n            case \"tank_shoot\":\n                this.emitTankShoot(meta, data);\n                break;\n            case \"damage_tank\":\n                this.emitDamageTank(meta, data);\n                break;\n            case \"damage_crate\":\n                this.emitDamageCrate(meta, data);\n                break;\n            case \"respawn_tank\":\n                this.emitRespawnTank(meta, data);\n                break;\n        }\n    }\n\n    emitTankShoot(meta, data) {\n        this.provider.postTankShoot(meta, {data: data, timestamp: Date.now()});\n    }\n\n    emitDamageTank(meta, data) {\n        this.provider.postDamageTank(meta, {data, timestamp: Date.now()});\n    }\n\n    emitDamageCrate(meta, data) {\n        this.provider.postDamageCrate(meta, {data, timestamp: Date.now()});\n    }\n\n    emitRespawnTank(meta, data) {\n        this.provider.postRespawnTank(meta, {data, timestamp: Date.now()});\n    }\n\n    emitTanksUpdate(meta) {\n        if (!this.games[meta.gameId]) return;\n        this.provider.postTanksUpdate(meta, {data: this.games[meta.gameId].tankSharedData, timestamp: Date.now()});\n    }\n\n    onUserTankShoot(userData, {data, timestamp}) {\n        const {barrelEnd, shootDirection, initialVelocity, id} = data;\n        const tank =  this.games[userData.gameId].tanks.find((tank) => tank.id === +id);\n        if (!tank) console.warn(tank.id + ' tank shoot not found');\n        const barrelEndVec = new THREE.Vector3().copy(barrelEnd);\n        const shootDirectionVec = new THREE.Vector3().copy(shootDirection);\n\n        tank.addProjectile(barrelEndVec, shootDirectionVec, initialVelocity);\n        tank.shootSignal(barrelEndVec.clone(), shootDirectionVec.clone(), initialVelocity);\n    }\n\n    onUserTankRespawn(userData, {data, timestamp}) {\n        const {id} = data;\n        const tank =  this.games[userData.gameId].tanks.find((tank) => tank.id === +id);\n        this.games[userData.gameId].respawnTank(tank);\n    }\n\n    onUserTanksUpdate(userData, {data, timestamp}) {\n        const {id} = data;\n        const tank = this.games[userData.gameId].tanks.find((tank) => tank.id === +id);\n        tank.updateServerState(data, timestamp);\n    }\n\n    onGameCreate(userData, options) {\n        const game = options.gameId && this.games[options.gameId] ? \n            this.games[options.gameId] : new HeadlessGame(loader, {...options,\n                gameId: generateGameId(),\n                onUpdate: this.onGameTick.bind(this), \n                onAction: this.onGameAction.bind(this),\n            });\n        this.ensureGame(game, userData, options)\n    }\n\n    ensureGame(game, userData, options) {\n        this.provider.setUserMeta(userData.id, {gameId: game.id});\n        this.provider.postGameCreated({id: userData.id, gameId: game.id}, {\n            playerTankId: options.playerTankId, \n            gameId: game.id, \n            map: game.battleMap.getMap(),\n            tanks: game.tanks.reduce((acc, tank) => {\n                acc[tank.id] = {\n                    position: tank.body.position,\n                    quaternion: tank.body.quaternion,\n                    angularVelocity: tank.body.angularVelocity,\n                    velocity: tank.body.velocity,\n                    turretRotation: tank.turretRotation,\n                    barrelAngle: tank.barrelAngle,\n                    isIndirectFireMode: tank.isIndirectFireMode,\n                    isAcceleratingShot: tank.isAcceleratingShot,\n                    shotVelocity: tank.shotVelocity,\n                    isDestroyed: tank.isDestroyed,\n                    hp: tank.health,\n                    visible: tank.mesh.visible,\n                }\n                return acc;\n            }, {}),\n            frags: game.frags,\n        });\n        \n        this.games[game.id] = game;\n        this.games[game.id].playersReady = {[userData.id]: false}\n        console.log(game.id, userData.id)\n    }\n\n    onReadyToStartGame(userData, options) {\n        console.log('onReadyToStartGame', userData)\n        this.games[userData.gameId].playersReady[userData.id] = true;\n        if (Object.values(this.games[userData.gameId].playersReady).every(r => r)) {\n            this.games[userData.gameId].start();\n            this.provider.postGameStarted(userData, {time: this.games[userData.gameId].clock.getElapsedTime()});\n        }\n    }\n}","export const eventSerialize = (eventName, input) => {\n    return {event: eventName, payload: input}\n}\n\nexport const eventDeserialize = (input) => {\n    return input;\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"uWebSockets.js\");","import { eventDeserialize, eventSerialize } from \"./events/event\";\nimport uWS from 'uWebSockets.js';\nconst port = +process.env.PORT || 9001;\n\n\nexport class WsProvider {\n    _count = 0;\n    callbacks = {};\n    users = {};\n    constructor() {\n        console.log('Listen on post '+ port);\n        this.app = uWS.App().get('/', (res, req) => {\n            res.end(`Pocket tanks server time: ${new Date().toISOString()}`);\n        }).ws('/ws', {\n            /* Options */\n            compression: uWS.SHARED_COMPRESSOR,\n            maxPayloadLength: 16 * 1024 * 1024,\n            idleTimeout: 10,\n            maxBackpressure: 1024,\n          \n            /* Todo, Setting 1: merge messages in one, or keep them as separate WebSocket frames - mergePublishedMessages */\n            /* Todo, Setting 4: send to all including us, or not? That's not a setting really just use ws.publish or global uWS.publish */\n          \n            /* Handlers */\n            open: (ws) => {\n              ws.id = `${++this._count}`;\n              this.users[ws.id] = ws;\n              /* Let this client listen to all sensor topics */\n            },\n            message: (ws, buf, isBinary) => {\n              const decoder = new TextDecoder();\n              const data = decoder.decode(buf);\n              const event = eventDeserialize(JSON.parse(data));\n              const userData = ws.getUserData();\n              this._handleEvent(userData.meta ? userData.meta : userData, event);\n            },\n            drain: (ws) => {\n          \n            },\n            close: (ws, code, message) => {\n                const userData = ws.getUserData();\n                this._handleEvent(userData.meta, {\"event\": \"user_left\", data: {}});\n                delete this.users[ws.id]\n              /* The library guarantees proper unsubscription at close */\n            }\n          }).any('/*', (res, req) => {\n            res.end('Nothing to see here!');\n          });\n    }\n\n    listen() {\n        this.app.listen(port, (token) => {\n            if (token) {\n              console.log('Listening to port ' + port);\n            } else {\n              console.log('Failed to listen to port ' + port);\n            }\n        });\n    }\n\n    _handleEvent(meta, data) {\n        const {event, payload} = data;\n        const handlers = this.callbacks[event];\n        if (!handlers) return;\n        handlers.forEach((cb) => cb(meta, payload));\n    }\n\n    _onEvent(name, callback) {\n        this.callbacks[name] = this.callbacks[name] ? [...this.callbacks[name], callback] : [callback]\n    }\n\n    _postSingleEvent(name, meta, data) {\n        // setTimeout(() => {\n        //      this.users[meta.id].send(JSON.stringify(eventSerialize(name, data)), false, true);\n        // }, 100)\n        this.users[meta.id].send(JSON.stringify(eventSerialize(name, data)), false, true);\n    }\n\n    _postEvent(name, meta, data) {\n        // setTimeout(() => {\n        //    this.app.publish(`/game/${meta.gameId}/events`, JSON.stringify(eventSerialize(name, data)), false, true);\n        // }, 100)\n        this.app.publish(`/game/${meta.gameId}/events`, JSON.stringify(eventSerialize(name, data)), false, true);\n    }\n\n    setUserMeta(userId, meta) {\n        this.users[userId].meta = {...meta, id: userId};\n    }\n\n    onUserLeft(callback) {\n        this._onEvent(\"user_left\", callback);\n    }\n\n    onGameCreate(callback) {\n        this._onEvent(\"game_create\", callback);\n    }\n\n    onReadyToStartGame(callback) {\n        this._onEvent(\"ready_to_start_game\", callback);\n    }\n\n    postGameStarted(meta, payload) {\n        console.log(\"game_started\", meta, payload);\n        this._postSingleEvent(\"game_started\", meta, payload);\n    }\n    \n    postGameCreated(meta, game) {\n        console.log(this.users[meta.id], `/game/${meta.gameId}/events`);\n        this.users[meta.id].subscribe(`/game/${meta.gameId}/events`);\n        this._postSingleEvent(\"game_created\", meta, game);\n    }\n\n    postTanksUpdate(meta, update) {\n        this._postEvent(\"tanks_update\", meta, update);\n    }\n\n    postTankShoot(meta, shoot) {\n        this._postEvent(\"tank_shoot\", meta, shoot);\n    }\n\n    postDamageTank(meta, data) {\n        this._postEvent(\"damage_tank\", meta, data);\n    }\n\n    postDamageCrate(meta, data) {\n        this._postEvent(\"damage_crate\", meta, data);\n    }\n\n    postRespawnTank(meta, data) {\n        this._postEvent(\"respawn_tank\", meta, data);\n    }\n\n    onUserTanksUpdate(callback) {\n        this._onEvent(\"user_tanks_update\", callback);\n    }\n\n    onUserTankShoot(callback) {\n        this._onEvent(\"user_tank_shoot\", callback);\n    }\n\n    onUserTankRespawn(callback) {\n        this._onEvent(\"user_tank_respawn\", callback);\n    }\n}\n","import { ProviderController } from \"./controllers/provider_controller\";\nimport { WsProvider } from \"./providers/ws/ws_provider\";\n\n\nconsole.log(process.env);\nconst provider = new WsProvider();\nconst controller = new ProviderController(provider);\ncontroller.listen();\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","require","Crate","position","size","arguments","length","undefined","_classCallCheck","this","createPhysicsBody","value","shape","CANNON","body","mass","addShape","copy","SquareDebris","_createClass","scene","color","rotation","THREE","velocity","angularVelocity","Math","random","removed","createMesh","geometry","x","y","z","material","mesh","rotateY","add","deltaTime","remove","addScaledVector","multiplyScalar","FallingCrateDerbisEffect","crate","world","rectangles","debris","duration","elapsedTime","createDebris","i","rectangle","isVertical","PI","cubeSize","push","fromPosition","clone","direction","subVectors","normalize","forEach","update","DestructibleCrate","game","offset","geometryScale","resolution","height","id","generateCrateId","colorHex","setHex","cubes","shapes","scale","rectSizes","boxQuaternion","scaleVec","boxIndexes","rectIndexes","isDirty","activeCount","buildMesh","_this","verticalGeometry","index","matrix","buildPyramidBot","posY","posX","posZ","mx","makeRotationY","setPosition","setMatrixAt","active","buildPyramidRight","buildPyramidLeft","level","buildPyramidTop","isOdd","indexBlocks","Array","pow","fill","point","_this$cubes$i","isPointInsideBox","_this2","_ref","orientation","shapeOffset","shapeOrientation","shapeOffsets","shapeOrientations","updateMassProperties","updateBoundingRadius","aabbNeedsUpdate","_this3","_ref2","indexOf","splice","_this4","removeBodyShapes","initialShape","shapesToAdd","filter","s","addBodyShapes","shapesToRemove","isCrate","model","addBody","_ref3","_this5","inactiveCubes","cube","find","set","instanceMatrix","addUpdateRange","needsUpdate","updatePhysicalBody","hitPoint","radius","_this6","lastCurePosition","count","distanceTo","floatingCubesIndexSet","findFloatingCubes","clearFloatingCubes","_this7","c","has","map","headless","createFallingCrateDerbisEffect","_this8","visited","Set","floating","_ref4","_slicedToArray","_ref6","_ref7","flood","getIndex","_ref8","_ref9","nx","ny","nz","from","boxGeometry","boxPosition","computeBoundingBox","boundingBox","getSize","compose","inverseMatrix","invert","localPoint","applyMatrix4","abs","fallingDerbisEffect","addDestroyedEffect","battleMap","removeCrate","removeBody","_defineProperty","DestructibleCrateFactory","basicCount","lego","loader","getModel","legoTexture","getTexture","legoTextureNormal","normalMap","roughness","metalness","traverse","child","sz","children","crates","reduce","acc","castShadow","setUsage","options","applyState","BattleMap","obstaclesLevel","fence","cratesMeta","crateSize","crateResolution","spawnPoints","obstacles","crateInstancedMesh","tempPosition","tempQuaternion","tempScale","tempMatrix","createMap","createGround","createCrateInstancedMesh","createFence","createObstacles","metalTexture","metalNormalTexture","metalMetallicTexture","metalRoughnessTexture","metalAoTexture","roughnessMap","metalnessMap","aoMap","receiveShadow","grassTexture","wrapS","wrapT","repeat","groundGeometry","groundMaterial","ground","groundShape","groundBody","friction","restitution","quaternion","setFromAxisAngle","halfSize","addCrate","gridSize","cellSize","box","_loop","j","some","spawn","containsPoint","objectId","_objectSpread","_this$crates","destructible","factory","apply","_toConsumableArray","produceCrates","idx","spawnPoint","Explosion","owner","createExplosionCore","createShockwave","emissive","transparent","opacity","core","side","shockwave","progress","coreScale","shockwaveScale","particles","light","ParticleSystem","initialPosition","particleCount","isFadingOut","fadeOutDuration","fadeOutTimer","activeParticles","setupParticles","particlePositions","Float32Array","particleOpacities","particleSizes","particleColors","setAttribute","particleMaterial","blending","depthWrite","vertexColors","sizeAttenuation","particleSystem","currentPosition","previousPosition","updateFadeOut","updateActiveParticles","attributes","speed","divideScalar","min","colorFade","fade","fadeProgress","findContact","contacts","targetBodyId","bi","bj","collisionFilterGroup","collisionFilterMask","contact","target","Projectile","initialVelocity","velocityFactor","isDestroyed","force","event","isSinglePlayer","pointToLocalFrame","vadd","rj","damageCrate","explode","explosion","addExplosion","explosionPos","tanks","tank","tankPos","distance","isPointInsideTank","damage","calculateDamage","damageTank","startFadeOut","onCollide","round","distanceFactor","console","log","concat","triggerParticles","addFadingParticleSystem","createDestroyedTankEffect","deepPosition","createDestroyedCrateEffect","slerp","qb","t","_x","_y","_z","w","_w","cosHalfTheta","sqrSinHalfTheta","Number","EPSILON","sinHalfTheta","sqrt","halfTheta","atan2","ratioA","sin","ratioB","Tank","generateTankId","health","maxHealth","moveDirection","rotateDirection","turnSpeed","currentSpeed","currentTurnSpeed","maxSpeed","acceleration","deceleration","turnAcceleration","turnDeceleration","barrelPivot","barrelAngle","barrelRotationSpeed","maxRotationPerFrame","indirectBarrelMinAngle","indirectBarrelMaxAngle","indirectFireInitialAngle","directBarrelMinAngle","directBarrelMaxAngle","directFireInitialAngle","barrelMaxAngle","barrelMinAngle","turretRotation","turretRotationSpeed","minShotVelocityDirect","maxShotVelocityDirect","minShotVelocityIndirect","maxShotVelocityIndirect","shotVelocity","minShotVelocity","maxShotVelocity","targetTurretAngle","targetBarrelAngle","isIndirectFireMode","barrelTransitionSpeed","isChangingMode","isTransitioning","transitionProgress","transitionDuration","originalDimensions","squareDimensions","isAcceleratingShot","serverState","lastUpdateTime","serverUpdateDelta","interpolationTime","toIndirect","isIndirect","updateTurretRotation","amount","dealer","max","state","timestamp","currentTime","delta","alpha","lerp","startTransition","setIndirectFireMode","extrapolatedPosition","extrapolatedQuaternion","angularVelocityLength","axis","unit","angle","mult","turretAngleDiff","maxRotation","sign","turret","barrelAngleDiff","floor","bodyGeometry","bodyMaterial","bodyMesh","order","turretGeometry","turretMaterial","barrelGeometry","barrelMaterial","barrel","setFromEuler","linearDamping","angularDamping","fixedRotation","halfExtents","updateConvexPolyhedronRepresentation","currentDimensions","lerpVectors","updateTransition","step","Date","now","interpolate","setMoveSpeed","setRotateSpeed","applyMovement","updateBarrelRotation","forward","result","vectorToWorldFrame","setSquareBodyState","setOriginalBodyState","hp","visible","targetSpeed","accelerationThisFrame","decelerationThisFrame","targetTurnSpeed","inputPosition","tankWorldPosition","getWorldPosition","tankQuaternion","toMouse","tankForward","applyQuaternion","setTargetTurretAngle","out","barrelMatrix","updateMatrixWorld","matrixWorld","applyAxisAngle","collisionResponse","tankMatrix","makeRotationFromQuaternion","turretMatrix","makeRotationX","finalMatrix","multiplyMatrices","multiply","barrelEnd","shoot","targetPosition","v","elevationAngle","startPosition","getBarrelTipPosition","dx","dz","tan","cos","isNaN","isFinite","targetPos","hitOnly","startPos","radianAngle","g","groundDistance","points","timeStep","shootDirection","sub","setFromMatrixPosition","addProjectile","shootSignal","projectile","onAction","gameId","type","data","resetAttributes","SkyBox","createSkyBox","uniforms","topColor","bottomColor","exponent","skyGeo","skyMat","vertexShader","fragmentShader","sky","BinaryHeap","scoreFunction","content","element","bubbleUp","end","pop","sinkDown","node","n","score","parentN","parent","elemScore","child2N","child1N","swap","child1Score","child1","child2","TAU","mod","Node","h","f","AIPlayer","lastFireTime","lastIndirectFireTime","fireCooldown","indirectFireCooldown","directFireAccuracy","indirectFireAccuracy","currentPath","currentTargetAngle","debugPath","nextPoint","obstacleGrid","createObstacleGrid","lastPathfindingPosition","pathfindingThreshold","lastNoPathDeadline","noPathCooldown","isShooting","debugGrid","obstacleMarkers","marker","mapSize","setFromPoints","obstacleMaterial","obstacleGeometry","obstacleMesh","updateState","search","siege","attack","opponents","newTarget","findNearestOpponent","recalculatePath","checkTargetMovement","distanceToTarget","hasLineOfSight","clock","getElapsedTime","tankPosition","findPath","currentTargetPosition","to","vsub","ray","bodies","intersectBodies","hasHit","debugLine","moveTowardsTarget","stopTank","tryIndirectFire","tryDirectFire","move","rotate","remainingPath","slice","unshift","visualizePath","start","openSet","closedSet","startNode","endNode","findNearestFreeNode","manhattanDistance","iterations","maxSearchRadius","Infinity","isEmpty","currentNode","path","current","getPositionKey","_step","_iterator","_createForOfIteratorHelper","getNeighbors","neighbor","tentativeGScore","equals","done","err","e","b","neighbors","_i","_directions","dir","neighborPos","isWalkable","gridDimension","ceil","grid","minX","maxX","minY","maxY","ensureDirectMode","directionXZ","shift","angleDiff","getDeltaAngle","pathLine","p","callback","toTarget","targetAngle","tankBodyAngle","randomError","turretAngle","setBarrelTargetAngle","aimCalculatedShotVelocity","calculateVelocity","accelerateShotVelocity","stopAccelarateShotVelocity","aimAtTarget","ensureIndirectMode","nearest","distToNearest","startX","startY","nearestFreeNode","minDistance","dy","nodePosition","PowerUp","createGlowEffect","startAnimation","onCollideListener","cageGeometry","cageEdges","dashedMaterial","dashSize","gapSize","linewidth","cageMesh","computeLineDistances","innerGeometry","innerMaterial","innerMesh","glowColor","glowLight","onCollect","animationTime","yOffset","glowIntensity","intensity","HealPowerUp","_PowerUp","_callSuper","_inherits","_get","_getPrototypeOf","cross","heal","getMesh","crossMaterial","specular","shininess","flatShading","horizontalGeometry","horizontalMesh","verticalMesh","endGeometry","pos","_endMesh$position","endMesh","tickLengthMs","HeadlessGame","ai","onUpdate","_tankCounter","_crateCounter","gravity","projectiles","maxProjectiles","plane","skyBox","fromMap","tankSharedData","aiPlayers","initiateAI","respawnTimer","powerUps","powerUpSpawnInterval","lastPowerUpSpawnTime","setupCollisionEvents","explosions","frags","tick","bind","entries","tankId","getStateData","addEventListener","bodyA","bodyB","powerUp","pu","removePowerUp","getDelta","updateProjectiles","updateExplosions","updatePowerUps","updateSharedData","cycle","setTimeout","ref","clearTimeout","cancelLoop","requestAnimationFrame","cancelAnimationFrame","hasContact","isOutOfBounds","boundaryLimit","isPlayerControlledTank","onTankDeath","respawnTank","_this$getOptimalSpawn","getOptimalSpawnPoint","optimalPoint","respawnTankInPosition","reset","minEnemies","enemiesNearby","countEnemiesNearPoint","getRandomPosition","healPowerUp","takeDamage","tankKillerId","checkTankDestruction","handleTankDeath","innerPoint","deepPoint","vec","destroyCubesInRadius","loop","FakeLoader","texture","Uint8Array","ProviderController","provider","frequency","timeSinceStateLastProvide","onGameCreate","meta","onReadyToStartGame","onUserTanksUpdate","onUserTankShoot","onUserLeft","onUserTankRespawn","listen","emitTanksUpdate","games","playersReady","values","every","ready","stop","emitTankShoot","emitDamageTank","emitDamageCrate","emitRespawnTank","postTankShoot","postDamageTank","postDamageCrate","postRespawnTank","postTanksUpdate","userData","warn","barrelEndVec","shootDirectionVec","updateServerState","onGameTick","onGameAction","ensureGame","setUserMeta","postGameCreated","playerTankId","getMap","r","postGameStarted","time","eventSerialize","eventName","input","payload","port","process","env","PORT","WsProvider","app","uWS","res","req","toISOString","ws","compression","maxPayloadLength","idleTimeout","maxBackpressure","open","_count","users","message","buf","isBinary","TextDecoder","decode","JSON","parse","getUserData","_handleEvent","drain","close","code","any","token","handlers","callbacks","cb","name","send","stringify","publish","userId","_onEvent","_postSingleEvent","subscribe","_postEvent"],"sourceRoot":""}